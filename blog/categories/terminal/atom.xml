<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Terminal | Adventures in brine]]></title>
  <link href="http://rich.k3r.me/blog/categories/terminal/atom.xml" rel="self"/>
  <link href="http://rich.k3r.me/"/>
  <updated>2015-01-20T22:52:54+00:00</updated>
  <id>http://rich.k3r.me/</id>
  <author>
    <name><![CDATA[Richard Kimber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Converting SVN to GIT]]></title>
    <link href="http://rich.k3r.me/blog/2012/11/25/converting-svn-to-git/"/>
    <updated>2012-11-25T20:36:00+00:00</updated>
    <id>http://rich.k3r.me/blog/2012/11/25/converting-svn-to-git</id>
    <content type="html"><![CDATA[<blockquote><p>This is a repost of <a href="http://dogma.co.uk/blog/10-converting-svn-to-git">http://dogma.co.uk/blog/10-converting-svn-to-git</a></p></blockquote>

<p>We&rsquo;ve recently set about converting all our old SVN repositories to GIT. The process is quite easy thanks to the <code>git svn</code> command, but there are some gotchas. So, I&rsquo;ll detail the process below.</p>

<p>Every revision in a SVN repository has an author, these authors need to be migrated to the new GIT repository; which is done by compiling a text file listing the existing SVN username along with the author&rsquo;s new GIT equivalent. The format of the text file is as follows:</p>

<pre><code class="bash">svn_username = GIT User Name &lt;user@dogma.co.uk&gt;
</code></pre>

<p>You can list as many users in this file as you like, duplicating the GIT details if required. To generate a list of the SVN author&rsquo;s run the following with the SVN repo:</p>

<pre><code class="bash">svn log --xml | grep author | sort -u | perl -pe 's/.&gt;(.?)&lt;./$1 = /'
</code></pre>

<p>A potential gotcha here is that <code>git svn</code> will fail if the SVN username has spaces in it. This caught me out as our older SVN repos were originally hosted on a Visual SVN Server, which used the username <code>Visual SVN</code>.  If you have a username with spaces in it, you must change that username in each revision the author is attached to.</p>

<p>To identify the offending revisions, run:</p>

<pre><code class="bash">svn log | sed -n '/svn_username/,/-----$/ p'
</code></pre>

<p>Then to fix the username, run the following on each revision:</p>

<p>svn propedit svn:author -r revision &ndash;revprop svn_url
Once you have created an authors file (usually called authors.txt), run the following in an empty directory to clone the SVN repo into a new temporary GIT repo called <code>git-tmp</code>:</p>

<pre><code class="bash">git svn clone --stdlayout --no-metadata -A authors.txt svn_url git-tmp
</code></pre>

<p>Change directory into <code>git-tmp</code> and run the following to fetch the SVN repo structure:</p>

<pre><code class="bash">git svn fetch
</code></pre>

<p>Now you&rsquo;ll want to link the temporary repository to your destination remote GIT repo, by running the following:</p>

<pre><code class="bash">git remote add remote git_url
git push -u remote master
</code></pre>

<p>The commands above will only push the master (what was trunk) to the remote repo. Currently, any branches you have in the SVN repo only exist as remote references in <code>git-tmp</code>. To make these references local branches and then push them to the server, run the following for each branch you would like to keep:</p>

<pre><code class="bash">branch=branch; remote=remote; git checkout -b $branch remotes/$branch; git push -u $remote $branch; git checkout master
</code></pre>

<p>Providing all went well, you can now discard the temporary GIT repo and clone a fresh copy of your new remote GIT repo.</p>
]]></content>
  </entry>
  
</feed>
