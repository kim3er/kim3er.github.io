<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Modules | Adventures in brine]]></title>
  <link href="http://rich.k3r.me/blog/categories/modules/atom.xml" rel="self"/>
  <link href="http://rich.k3r.me/"/>
  <updated>2015-06-14T10:22:17+01:00</updated>
  <id>http://rich.k3r.me/</id>
  <author>
    <name><![CDATA[Richard Kimber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Consuming ES6 Modules in NPM Packages]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/12/consuming-es6-modules-in-npm-packages/"/>
    <updated>2015-04-12T14:06:12+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/12/consuming-es6-modules-in-npm-packages</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to have to start coming up with more interesting title for my posts. My eyes are watering at the thought of &lsquo;Consuming ES6 modules in NPM packages&rsquo;. Maybe something more exciting, like &lsquo;Munching on the nuggets of next gen wonderment&rsquo;. I&rsquo;ll work on it.</p>

<p>In this post I&rsquo;m going to describe how you can make use of <a href="https://babeljs.io/">Babel&rsquo;s</a> support for <a href="https://babeljs.io/docs/learn-es6/#modules">ES6 modules</a>, and how you might consume them as <a href="https://www.npmjs.com/">NPM</a> packages. It&rsquo;s pretty neato stuff and makes for very clean code. Read on!</p>

<!-- more -->


<p><em><strong>TL;DR:</strong> Scroll down to the <a href="http://www.starwars.com/">Star Wars</a> reference for the actual tutorial.</em></p>

<p><em><strong>NOTE:</strong> This tutorial has two <a href="https://github.com/">Github</a> repos, <a href="https://github.com/kim3er/example-es6-module">this one</a> and <a href="https://github.com/kim3er/example-module-consumer">this one</a>.</em></p>

<p>Modules have existed in JS space for a while now. I&rsquo;ve dabbled in the past, because I&rsquo;m a big fan of results, I mean who wouldn&rsquo;t be?</p>

<ul>
<li>Keeps junk out of the global scope</li>
<li>Only load what you need</li>
<li>Inferred order of compilation</li>
</ul>


<p>I&rsquo;m just going to pick up on that last point for a moment. While I dabbled, I never really embraced modules as part of a longer term strategy. My reluctance was due to inherent ugliness of implementation, with anything but Node&rsquo;s <code>require</code> and <code>exports</code> syntax. The ugliness is there to make these great ideas work in the browser.</p>

<p>Using the fantastic <a href="https://jquery.com/">jQuery</a> as an example, stuff like:</p>

<pre><code class="js">    if ( typeof module === "object" &amp;&amp; typeof module.exports === "object" ) {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory( global, true ) :
            function( w ) {
                if ( !w.document ) {
                    throw new Error( "jQuery requires a window with a document" );
                }
                return factory( w );
            };
    } else {
        factory( global );
    }
</code></pre>

<p>and</p>

<pre><code class="js">// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" &amp;&amp; define.amd ) {
    define( "jquery", [], function() {
        return jQuery;
    });
}
</code></pre>

<p>and</p>

<pre><code class="js">// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
}
</code></pre>

<p>I get why it&rsquo;s all there, and I appreciate the efforts teams like jQuery put into compatibility with all of these different systems. I have benefitted from those efforts on many occasions. I bet it&rsquo;s a pain in the backside to maintain, it&rsquo;s very clever, but also, U-G-L-Y.</p>

<h3>Flashback (wavy lines)</h3>

<p>I was drawn back into the fold, as the result of a recent ES6 based project I&rsquo;ve been working on. I was gorging on the beautiful ES6 class syntax, doing a fine job of controlling compilation through the use of sub folders.</p>

<p>As an example, the classes in directories &lsquo;controller&rsquo; and &lsquo;model&rsquo;, inherit from directory &lsquo;base&rsquo;. Classes in &lsquo;controller&rsquo; can reference classes in &lsquo;model&rsquo;, but not the other way around.</p>

<pre><code class="bash">root
    base            &lt;-- Compile first
    controller      &lt;-- Compile third
    model           &lt;-- Compile second
</code></pre>

<pre><code class="js base/base_class.js">class BaseClass {
    parent()  {
        console.log('something interesting');
    }
}
</code></pre>

<pre><code class="js controller/app_controller.js">class AppController extends BaseClass {
    action()  {
        let user = new UserModel();
        console.log('I\'m an action');
    }
}
</code></pre>

<pre><code class="js model/user_model.js">class UserModel extends BaseClass {
    constructor() {
        this.parent();
        console.log('I\'m a model');
    }
}
</code></pre>

<p>This all worked great, better than great, I was king of the world. Until I needed to create <code>BaseController</code>, that extends <code>BaseClass</code> and is extended by <code>AppController</code>.</p>

<pre><code class="js controller/base_controller.js">class BaseController extends BaseClass {
    defaultAction()  {
        console.log('I\'m a default action');
    }
}
</code></pre>

<pre><code class="js controller/app_controller.js">class AppController extends BaseController {
    action()  {
        this.defaultAction();
    }
}
</code></pre>

<p>Due to the dreaded alphabet, <code>AppController</code> compiles before <code>BaseController</code>. Arrrgh. Why world, would you treat me this way?!</p>

<pre><code class="bash">controller
    app_controller.js       &lt;-- Attempts to compile first, but BaseController doesn't exist yet
    base_controller.js      &lt;-- Waits patiently
</code></pre>

<p>Don&rsquo;t tell anyone, but my initial fix was to:</p>

<pre><code class="bash">controller
    0.base_controller.js    &lt;-- Compiles first
    app_controller.js       &lt;-- Compiles second
</code></pre>

<p>I kidded myself for a while that this was a valid design decision, until maybe my third or forth &lsquo;zero dot&rsquo; file. I needed a better way of controlling the order of compilation; it also felt like those base classes could be reused.</p>

<h2>And so, it begins. Destroy them, destroy them all.</h2>

<p>We&rsquo;re going to create two projects; the <a href="https://github.com/kim3er/example-es6-module">module</a> and the <a href="https://github.com/kim3er/example-module-consumer">consumer</a>.</p>

<h3>The module</h3>

<p>The module package will be written in ES6 JavaScript, but will need to be transpilied to ES5, for compatibility. So the ugliness is still there, just hidden. We&rsquo;ll use <a href="http://gulpjs.com/">Gulp</a> and Babel for the build.</p>

<h4>The setup</h4>

<p>I&rsquo;ve created a directory called &lsquo;blog&rsquo;, in here I&rsquo;m writing the following, in terminal:</p>

<pre><code class="bash">mkdir es6-module
cd es6-module
npm init                        &lt;-- Just enter through the defaults
mkdir src
touch gulpfile.js .gitignore
</code></pre>

<p>Your project should look like:</p>

<pre><code class="bash">es6-module
    src                 &lt;-- This is where we\'re going to put our ES6
    .gitignore          &lt;-- We\'ll need to ignore \'node-modules\', when this goes to GIT
    gulpfile.js         &lt;-- Gulp build file
    package.json        &lt;-- This was created when you typed in \'npm init\'
</code></pre>

<p>Make &lsquo;.gitignore&rsquo; look this:</p>

<pre><code class="text .gitignore">node_modules
</code></pre>

<p>Change the <code>main</code> option in &lsquo;package.json&rsquo; to read &lsquo;./lib/index.js&rsquo;. A &lsquo;lib&rsquo; directory will be created as part of the build process, which will contain our ES5 code.</p>

<pre><code class="json">{
    ....
    "main": "./lib/index.js",
    ....
}
</code></pre>

<p><code>main</code> is the entry point to our package. In a consumer, if you were to <code>require('es6-module')</code>, you&rsquo;ll get the exports from the <code>main</code> file.</p>

<h4>The build script</h4>

<p>We need a build script in our &lsquo;gulpfile.js&rsquo;.</p>

<pre><code class="js gulpfile.js">var gulp = require('gulp'),
    del = require('del'),
    babel = require('gulp-babel');

var SRC_PATH = './src',
    LIB_PATH = './lib';

gulp.task('clear', function(cb) {
    del([ LIB_PATH + '/*' ], function() {
        cb();
    });
});

gulp.task('build', [ 'clear' ], function() {
    return gulp.src([ SRC_PATH + '/**/*.js' ])
                .pipe(babel({ blacklist: [ 'useStrict' ] }))
                .pipe(gulp.dest(LIB_PATH));
});

gulp.task('default', function() {
    gulp.start('build');
});
</code></pre>

<p>The script has three dependancies:</p>

<ol>
<li>Gulp - The script runner. Like <a href="http://gruntjs.com/">Grunt</a>, but code first.</li>
<li><a href="https://www.npmjs.com/package/del">Del</a> - A little package for deleting stuff.</li>
<li>Babel - ES6 transpiler. Reinvigorated my already deeply unnatural love of JavaScript. Hallelujah.</li>
</ol>


<p>Install the dependancies like so:</p>

<pre><code class="bash">npm install -g gulp babel
npm install --save-dev gulp del gulp-babel
</code></pre>

<p>I think the <code>clear</code> task is self explanatory, so lets talk about <code>build</code>. Typically in a build script, it&rsquo;s tempting to concatenate, but our package is going to benefit from keeping the code in separate files. By keeping the code in separate files, modular, we&rsquo;ll be implementing JavaScript module benefit #2 &lsquo;Only load what you need&rsquo;.</p>

<p>The code itself is transpiled through Babel, to create the ES6 code in &lsquo;lib&rsquo;. I&rsquo;ve blacklisted &lsquo;useStrict&rsquo;. I do this by default, because <code>"use strict"</code> can stop execution in iOS UIWebViews, specifically when using <a href="http://cordova.apache.org/">Cordova</a>.</p>

<h4>The code</h4>

<p>In the src directory, create the following files:</p>

<pre><code class="bash">src
    clever_class.js &lt;-- An example module
    index.js        &lt;-- Our main file
</code></pre>

<pre><code class="js src/clever_class.js">export class CleverClass {
    constructor() {
        console.log('I\'m a clever class');
    }
}
</code></pre>

<pre><code class="js src/index.js">export * from './clever_class';
</code></pre>

<p><em>I think you can already see how useful our new package is going to be.</em></p>

<p><code>CleverClass</code> is pretty unexceptional, except for the addition of <code>export</code> before the <code>class</code> declaration. <code>export</code> tells Babel that we want to reference <code>CleverClass</code> as module.</p>

<p>The code in &lsquo;index.js&rsquo; is really interesting. We&rsquo;re literally creating an index to all modules in our package, that we want made public. <code>export * from</code> (not <code>import</code>), re-exports <code>CleverClass</code> as part of &lsquo;index.js&rsquo;.</p>

<p>Think about the implications here. You can have twenty different classes in this directory, all extending each other in different and exciting ways. From &lsquo;index.js&rsquo;, you choose which of those classes make it to your public API. <code>CleverClass</code> may inherit from a class called <code>BaseClass</code>, but only <code>CleverClass</code> is accessible, even though <code>CleverClass</code> still benefits from the existence of <code>BaseClass</code>.</p>

<p><em>At this point, you&rsquo;re starting to feel like Skeletor, just before he was robbed of the powers of Grey Skull.</em></p>

<p>Okay, build the mutha:</p>

<pre><code class="bash">gulp build
</code></pre>

<p>Any errors? No, great. You should now have a &lsquo;lib&rsquo; directory that mirrors the structure of &lsquo;src&rsquo;, just with ES5 code, instead of ES6.</p>

<p><em><strong>NOTE:</strong> This feels a bit &lsquo;fly-by the seat of your pants&rsquo; coding. Usually I&rsquo;d have a test suite in the project, to ensure that we&rsquo;re all rocking in the right direction. However, we&rsquo;re about to build a consumer for exactly that, and for the purposes of this tutorial I wanted to keep concerns clean and avoid duplication. You dig?</em></p>

<h3>The consumer</h3>

<p>The purpose of this tutorial is to demonstrate how you can consume ES6 modules, contained within an NPM package. To do this, we need a separate project, from which to consume the package; this is that project.</p>

<h4>The setup</h4>

<p>From the blog directory:</p>

<pre><code class="bash">mkdir module-consumer
cd module-consumer
npm init                        &lt;-- Just enter through the defaults
mkdir app
touch gulpfile.js .gitignore
</code></pre>

<p>Here is our &lsquo;.gitignore&rsquo;:</p>

<pre><code class="text .gitignore">.web
node_modules
</code></pre>

<p>Here is our directory structure:</p>

<pre><code class="bash">module-consumer
    app                 &lt;-- This is where we\'re going to put our test app
    .gitignore          &lt;-- We'll need to ignore \'node-modules\', when this goes to GIT
    gulpfile.js         &lt;-- Gulp build file
    package.json        &lt;-- This was created when you typed in \'npm init\'
</code></pre>

<h4>The build script</h4>

<p>Our test app is going to be a very simple website, so we&rsquo;re going to need a web server, in this case <a href="https://github.com/senchalabs/connect">Connect</a>. Because we&rsquo;re using a website as our testbed, we need to a way to consume the NPM package in a way that the browser understands; for this, we will use <a href="http://browserify.org/">Browserify</a>.</p>

<pre><code class="js gulpfile.js">var gulp = require('gulp'),
    connect = require('gulp-connect'),
    del = require('del'),
    watch = require('gulp-watch'),
    runSequence = require('run-sequence'),
    babelify = require('babelify'),
    browserify = require('browserify'),
    source = require('vinyl-source-stream');

var APP_PATH = './app',
    WEB_PATH = './.web';

gulp.task('clear', function(cb) {
    del([ WEB_PATH + '/*' ], function() {
        cb();
    });
});

gulp.task('js', function() {
    return browserify({
                    entries: APP_PATH + '/app.js',
                    debug: true
                })
                .transform(babelify)
                .bundle()
                .pipe(source('app.js'))
                .pipe(gulp.dest(WEB_PATH));
});

gulp.task('index', function() {
    return gulp.src([ APP_PATH + '/index.html' ])
        .pipe(gulp.dest(WEB_PATH));
});

gulp.task('connect', function(cb) {
    connect.server({
        root: WEB_PATH,
        livereload: true
    });

    cb();
});

gulp.task('livereload', function () {
    return gulp.src( WEB_PATH + '/**/*' )
        .pipe(connect.reload());
});

gulp.task('serve', [ 'clear' ], function(cb) {
    runSequence(
        [ 'js', 'index' ],
        'connect',
        function() {            
            watch([ APP_PATH + '/app.js' ], function() { gulp.start('js'); });
            watch([ APP_PATH + '/index.html' ], function() { gulp.start('index'); });
            watch([ WEB_PATH + '/**/*' ], function() { gulp.start('livereload'); });

            cb();
        }
    );
});
</code></pre>

<p>The script has these dependancies:</p>

<ol>
<li>Gulp</li>
<li>Gulp Connect - Our web server.</li>
<li>Del</li>
<li><a href="https://www.npmjs.com/package/gulp-watch">Gulp Watch</a> - Kicks off Gulp tasks, when a file changes.</li>
<li><a href="https://www.npmjs.com/package/run-sequence">Run Sequence</a> - Asynchronous task management. <a href="/blog/2015/03/23/in-the-name-of-gulp/">Read my blog</a>.</li>
<li><a href="https://github.com/babel/babelify">Babelify</a> - Babel transformer for Browserify.</li>
<li>Browserify - Makes Node&rsquo;s <code>require</code> work in the browser.</li>
<li><a href="https://www.npmjs.com/package/vinyl-source-stream">Vinyl Source Stream</a> - Makes Browserify work with Gulp.</li>
</ol>


<p>Install them:</p>

<pre><code class="bash">npm install --save-dev gulp gulp-connect del gulp-watch run-sequence babelify browserify vinyl-source-stream
</code></pre>

<p>Here&rsquo;s a quick rundown of the tasks in this script:</p>

<h5>js</h5>

<p>Transpiles and concatenates the contents of &lsquo;app/app.js&rsquo; (not created yet), using Browserify. Browserify follows every <code>require</code>, creates a virtual tree, then bundles all the code in one file.</p>

<p><em>I mean, wow, just wow.</em></p>

<p>We&rsquo;re not using the <code>require</code> syntax though, so we need Babelify. Babelify transforms/transpiles the ES6 syntax to ES5, for Browserify to understand.</p>

<p>The result of which is outputted to our temporary web directory (&lsquo;.web&rsquo;, which doesn&rsquo;t exist yet).</p>

<h5>index</h5>

<p>Moves &lsquo;app/index.html&rsquo; to &lsquo;.web/index.html&rsquo;. You don&rsquo;t want to be working directly in &lsquo;.web&rsquo;.</p>

<h5>connect</h5>

<p>Uses Connect to start a web server, with <a href="http://livereload.com/">Live Reload</a>.</p>

<h5>livereload</h5>

<p>Reacts to file changes. Live Reload reloads your browser programmatically. It&rsquo;s pure magic.</p>

<h5>serve</h5>

<p>This is what we type into terminal. It&rsquo;s a &lsquo;stitch everything together task&rsquo;. We use Run Sequence to run our two compilation tasks, <code>js</code> and <code>index</code>, before kicking off the web server task <code>connect</code>. Finally, we set off the file watchers, that react accordingly to file changes.</p>

<h4>The code</h4>

<p>I&rsquo;m going to start by boilerplating &lsquo;index.html&rsquo; in the &lsquo;app&rsquo; directory; the sole point of this file is to load &lsquo;app.js&rsquo;.</p>

<pre><code class="html app/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script type="text/javascript" src="./app.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Here&rsquo;s &lsquo;app.js&rsquo;.</p>

<pre><code class="js app/app.js">// Example 1: Namespace
import * as es6 from 'es6-module';

new es6.CleverClass();


// Example 2: Choose exports
// import { CleverClass } from 'es6-module';

// new CleverClass();


// Example 3: Target individual files
// import { CleverClass } from 'es6-module/lib/clever_class';

// new CleverClass();
</code></pre>

<p>&lsquo;app.js&rsquo; contains three examples of how can access &lsquo;CleverClass&rsquo; from our first project&hellip; Aww crap, hang on a minute, we&rsquo;ve not actually referenced our &lsquo;es6-module&rsquo; package!</p>

<pre><code class="bash">npm install --save-dev ../es6-module
</code></pre>

<p><em><strong>NOTE:</strong> NPM allows you to install local packages, that&rsquo;s what going on in the code above.</em></p>

<p>What was I saying? Right, three examples. They should all have the same result, but show the flexibility was the ES6 way of doing modules:</p>

<ol>
<li>Namespace - Using <code>as</code>, you can wrap your imports in a namespace. Very tidy.</li>
<li>Be selective - You may only want to use one or two classes, list them in curly brackets!</li>
<li>Don&rsquo;t pull in the whole library - Prepare to have your mind blown. &lsquo;Boom&rsquo;. You can reference individual modules within the package. Don&rsquo;t say a word, it&rsquo;s alright, I know. #shhh</li>
</ol>


<p>Run the server and breath in the sweet, sweet smell of success.</p>

<pre><code class="bash">gulp serve
</code></pre>

<p>I accept the payoff is a little underwhelming. If all is well, when you open you dev tool in a browser, pointed at <a href="http://localhost:8080">http://localhost:8080</a>, you should see:</p>

<pre><code class="text">I'm a clever class
</code></pre>

<h3>The conclusion</h3>

<p>That&rsquo;s not the point. The point is, &ldquo;I&rsquo;m a clever class&rdquo; was written in module in one package, and accessed from a script in another. All the code was written in ES6, and only the files needed, were accessed in the test site.</p>

<p>We&rsquo;ve gained:</p>

<ol>
<li>A modular build.</li>
<li>A reusable library.</li>
<li>Only compile what you use.</li>
<li>Future proofing, with ES6 compatible base code.</li>
</ol>


<p>We. Are. Awesome.</p>
]]></content>
  </entry>
  
</feed>
