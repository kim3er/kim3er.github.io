<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adventures in brine]]></title>
  <link href="http://rich.k3r.me/atom.xml" rel="self"/>
  <link href="http://rich.k3r.me/"/>
  <updated>2016-05-08T11:18:31+01:00</updated>
  <id>http://rich.k3r.me/</id>
  <author>
    <name><![CDATA[Richard Kimber]]></name>

  </author>
  <generator uri="http://rich.k3r.me/">Mistletoe</generator>

  
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2016/05/08/fear-of-drowning/"/>
    <updated>2016-05-08T11:18:31+01:00</updated>
    <id>http://rich.k3r.me/blog/2016/05/08/fear-of-drowning/</id>
    <content type="html"><![CDATA[<p><img src="/images/flood-aware/header.jpg" alt="Flood Aware Header"></p>
<p>I built an app! I&#39;ve built few, but this one is especially special (to me).</p>
<p><a href="http://flood-aware.k3r.me">Flood Aware</a> is an app for tracking water levels in your local area. The data is sourced from the Environment Agency (EA). The app started off as a personal project after buying a house right on the water, last summer; the canal to the front, and the river behind.</p>
<!-- more -->
<p>Insuring a house by the water, you&#39;re forced to think about flood risks. And while our new house wasn&#39;t affected by the 2012 floods, the notion of flooding became a bit of an obsession. I&#39;m total nerd, so discovering that EA tracked water levels, was a revelation! Conversations around the dinner table centred regularly on the previous day&#39;s water levels. We&#39;re all pretty nerdy.</p>
<p>Checking the locals levels though, was a bit of a clunky experience. I really just wanted an app that remembered my location and checked the local levels, with a nice graph. Life is alway better with a nice graph. I started putting something together. Progress was slow, when you write code all day long, there is not often a lot of motivation to start again in the evening!</p>
<p>The project had stalled on the run up to Christmas, I don&#39;t remember giving any serious thought to flooding (the odd joke, that is not overly funny now). Then Boxing Day happened, and we were very lucky in actual fact. Houses on our road are still uninhabitable now. In contrast, it was really just our garage that was affected. With a looming threat of more rain on the way, water levels were a renewed focal point.</p>
<p>Over the course of the next few days, I finished the initial version of Flood Aware and wasted no time submitting the app to Apple and Android stores. The reaction has been fantastic. Seeing people use the app and discussing it on social media, has been a real thrill.</p>
<p><img src="/images/flood-aware/pull-to-refresh.gif" alt="Pull to refresh"></p>
<p>The app, which is free, continues to improve. You can find your nearest water station, check water levels for the last three days, and be alerted to current flood warnings. The app is available on iOS, Android, and Google Chrome.</p>
<p>You can find more info, and links, <a href="http://flood-aware.k3r.me">here</a>.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2016/04/11/stretchy-image-headers-in-cordova/"/>
    <updated>2016-04-11T23:12:00+01:00</updated>
    <id>http://rich.k3r.me/blog/2016/04/11/stretchy-image-headers-in-cordova/</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR:</strong> FB Instant Article style stretchy images, in Cordova.</em></p>
<h2 id="the-experiment">The experiment</h2>
<p>I love this effect I&#39;ve being seeing in iPhone apps recently. Not sure what it&#39;s called, but I believe it has something to do with <a href="http://blog.matthewcheok.com/design-teardown-stretchy-headers/">Xcode&#39;s Auto Layout feature</a>. You know, it&#39;s the stretchy image at the top of Facebook&#39;s <a href="https://instantarticles.fb.com">Instant Articles</a> pages.</p>
<p><img src="/images/stretchy-image/instant-articles.jpg" alt="Facebook Instant Articles"></p>
<!-- More -->
<p>The prevailing feature of these images, is how they react to momentum scrolling. As you pull down the page down (putting the page in a negative scroll position), the header image stretches to accommodate the additional space. The image maintains aspect ratio as the image stretches, creating a zoom effect.</p>
<p><em><strong>NOTE:</strong>  Momentum scrolling is essentially the ability to over scroll your view.</em></p>
<p>This post is a result of me wanting to recreate this effect in JavaScript, for use in Cordova apps. Long story short, I cracked it; with a couple of <em>special considerations</em>.</p>
<h3 id="no-feedback-from-over-scroll-">No feedback from &#39;over scroll&#39;</h3>
<p>As I&#39;m sure you&#39;re aware, scrolling a HTML element triggers a scroll event, which happens for every change in position. Not so with momentum scrolling (or, over scroll). Let&#39;s clarify that. If you&#39;re already scrolling and you go into an over scroll, you will indeed generate scroll events, indicating negative scroll positions. However, there are two key scenarios that don&#39;t generate scroll events:</p>
<ol>
<li>If you motion directly into an over scroll. Your scroll position is zero and you attempt to scroll up (drag) the screen with your finger. This is not considered a scroll action and does not generate a scroll event.</li>
<li>If you release your finger during an over scroll, the resulting elastic &#39;snap back&#39; will not generate any scroll events.</li>
</ol>
<p>Furthermore, I suspect the snap back animation hides the true position of the content (until complete), as I&#39;ve not managed to track the animation using timers. I&#39;ve not tried <code>requestAnimationFrame</code> in a loop, but I&#39;m not optimistic.</p>
<h3 id="cordova-only-">Cordova only?</h3>
<p>For the sake of speed, I did my initial tests in Safari mobile, rather than a Cordova container. There are also some advantages, debugging wise, working directly in Safari. It stuck me that this experiment could have applications beyond Cordova; Safari web applications for instance. Alas not, I was getting some weird results that weren&#39;t making much sense at first.</p>
<p>The unexpected results, were due to the window&#39;s over scroll. Within a HTML page, you have to explicitly set which elements you&#39;d like to over scroll, by adding <code>-webkit-overflow-scrolling: touch;</code> to the CSS of your scrollable element. Unfortunately for Safari Mobile, and by extension Safari web applications, the whole window over scrolls by default.</p>
<p><em><strong>NOTE:</strong> The same happens in a Cordova container, but can be disabled using the <code>DisallowOverscroll</code> preference.</em></p>
<p>This effectively nullifies any attempt to over scroll a HTML element from a zero position. Attempting to over scroll an element, that is at a starting position of <code>0px</code>, results in an over scroll of the whole window.</p>
<p>I feel like this is still something that can work outside of Cordova, which I will pursue at a later date.</p>
<h2 id="the-implementation">The implementation</h2>
<p>Brace yourself. My implementation exists in a MVC structure, using Babel and Sass. The outcome relies heavily on jQuery, I imagine there would be small gains to be had, by removing it.</p>
<h3 id="html">HTML</h3>
<p>For the HTML, I placed the header image outside the scrollable container. Feels like a cheat, but I&#39;ve stuck in an empty div (<code>div.content-spacer</code>) above the actual content, the reason for this will become clear when I discuss the CSS.</p>
<pre><code class="lang-html">&lt;div class=&quot;image-stretch&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;scroll-parent&quot;&gt;
    &lt;div class=&quot;content-spacer&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;content-area&quot;&gt;
        &lt;p&gt;
            Lorem ipsum...
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h3 id="css">CSS</h3>
<p>The image itself is absolutely positioned behind the scrollable content. I have an empty div (<code>div.content-spacer</code>) above the content, to ensure the image is visible.</p>
<p><img src="/images/stretchy-image/stretchy-structure.jpg" alt="3D Representation of structure"></p>
<p>The space provided by the empty div, is 20px shy of the size of the image. This provides a buffer for the over scroll animation, which I like. It&#39;s not necessary for the effect to work though.</p>
<p><code>.smooth-operator</code> is a class that allows the conditionally application of transition effects, basically to track the snap back animation by using a similar transition duration.</p>
<pre><code class="lang-css">.image-stretch {
    background-image: url(&#39;../images/stretch.jpg&#39;);
    background-position: 50% 50%;
    background-size: cover;
    height: 200px;

    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
}

.smooth-operator {
    transition-duration: 250ms;
    transition-property: height;
}

.content-spacer {
    height: 180px;
}

.content-area {
    background: #fff;
    padding: 6px 10px;
}
</code></pre>
<h3 id="javascript">JavaScript</h3>
<p>I wanted the script to react to every pixel movement, without having to deal with same pixel twice. <code>_scrollTop</code> ensures this, by acting as the script&#39;s &#39;debounce&#39;.</p>
<h4 id="parallax-rollup">Parallax Rollup</h4>
<p>The finished script deals with two effects; the over scroll stretch, and a slight parallax rollup (as the image disappears off the screen). I want to talk about the parallax effect first, because while it wasn&#39;t the point of the experiment, I think it adds a nice bit of fluidity to the scroll. The effect comes at a price though.</p>
<p><img src="/images/stretchy-image/stretchy-image-can-break.gif" alt="Parallax isn&#39;t perfect"></p>
<p>As you scroll down the content (moving your finger up), the image tracks the content at a quarter speed of the scroll, see:</p>
<pre><code class="lang-javascript">$imageStretch
    .css(&#39;transform&#39;, `translateY(-${scrollTop / 4}px)`);
</code></pre>
<p>I think it looks great, so I&#39;ve kept it. But the cost is, if you momentum scroll back to the top of the page, the content will hit the zero position before the image realises what is going on (no scroll event). So, there is a slight jump as the image realigns itself (as the result of a <code>touchend</code> event).</p>
<pre><code class="lang-javascript">else if (scrollTop === 0 || scrollTop &gt;= imageHeight) {
    $imageStretch
        .css(&#39;transform&#39;, `translateY(0px)`);
}
</code></pre>
<p>To try and cheat the imbalance, the script above resets the Y position of the image to <code>0px</code>, the moment the image is out of view. Meaning that the image is already in it&#39;s starting position, should the user surprise us with a momentum scroll. The slight jump can still be seen if you momentum scroll with the image only half visible.  I just saying, you could make the overall user experience more cohesive, by not tracking the content scroll at all.</p>
<h4 id="stretchy-image-zoom">Stretchy image zoom</h4>
<p>The main attraction is the stretchy image zoom. As the finger pulls the view into over scroll, the image stretches to compensate. During the stretch, CSS transitions are disabled, which are then enabled during the snapback. The <code>250ms</code> transition duration has worked quite well for me in tests.</p>
<pre><code class="lang-javascript">const imageHeight = 200;
let _scrollTop;

$(&#39;.image-stretch&#39;)
    .on(&#39;webkitTransitionEnd transitionend&#39;, function() {
        $(this)
            .removeClass(&#39;smooth-operator&#39;);
    });

$(&#39;.scroll-parent&#39;)
    .on(&#39;scroll&#39;, function() {
        const scrollTop = $(this).scrollTop();

        if (_scrollTop === scrollTop) {
            return;
        }

        _scrollTop = scrollTop;

        const $imageStretch = $(&#39;.image-stretch&#39;);

        if (scrollTop &lt;= 0) {
            $imageStretch
                .height(imageHeight + Math.abs(scrollTop));

            if (scrollTop === 0) {
                $imageStretch
                    .css(&#39;transform&#39;, `translateY(0px)`);
            }
        }
        else if (scrollTop &gt; 0 &amp;&amp; scrollTop &lt;= imageHeight) {
            $imageStretch
                .css(&#39;transform&#39;, `translateY(-${scrollTop / 4}px)`);
        }
        else {
            $imageStretch
                .css(&#39;transform&#39;, `translateY(0px)`);
        }
    })
    .on(&#39;touchend&#39;, function() {
        const scrollTop = $(this).scrollTop(),
            $imageStretch = $(&#39;.image-stretch&#39;);

        if (scrollTop &lt; 0) {
            $imageStretch
                .addClass(&#39;smooth-operator&#39;);

            $imageStretch
                .height(imageHeight);
        }
        else if (scrollTop === 0 || scrollTop &gt;= imageHeight) {
            $imageStretch
                .css(&#39;transform&#39;, `translateY(0px)`);
        }
    });
</code></pre>
<h2 id="the-result">The result</h2>
<p><img src="/images/stretchy-image/stretchy-image-working.gif" alt="End result"></p>
<p>You can see the code <a href="https://github.com/kim3er/stretchy-header">here</a>. To run it yourself, ensure you have <a href="http://gulpjs.com">Gulp</a> and <a href="http://cordova.apache.org">Cordova</a> installed globally (<code>npm i -g cordova gulp</code>).</p>
<p>Run <code>gulp build</code> from the project root, and <code>cordova build ios</code> for the cordova directory. From there, you can run the project in Xcode. I will get around to creating a README, promise.</p>
<p>The test project was built using a <a href="http://yeoman.io/">yo</a> generator I&#39;m working on, called <a href="https://www.npmjs.com/package/generator-ml">ml</a>. Which is based on an MVC app framework I&#39;m working on, called <a href="https://www.npmjs.com/package/middle-layer">middle-layer</a>.</p>
]]></content>
  </entry>
    
  
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/06/16/async-slash-await-readable-non-blocking-code/"/>
    <updated>2015-06-16T23:06:49+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/06/16/async-slash-await-readable-non-blocking-code/</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR:</strong> Shit just got streamlined. More specifically, promises start looking cleaner when you spray them with &#39;Callbacks Begone&#39;.</em></p>
<p>In this post I&#39;m going to give you a quick demo of how easy it is to incorporate ES7&#39;s proposed <a href="https://github.com/lukehoban/ecmascript-asyncawait">Async/Await</a> functionality into your existing ES6 code. To build the code, I&#39;m using <a href="https://babeljs.io/">Babel</a> with &#39;es7.asyncFunctions&#39; enabled. You can read about my <a href="https://github.com/gulpjs/gulp">Gulp</a> setup <a href="/blog/2015/03/23/in-the-name-of-gulp/">here</a>.</p>
<!-- More -->
<p>Consider the code below:</p>
<pre><code class="lang-js">function asyncFuncA() {
  return new Promise(function(r) {
    setTimeout(() =&gt; { r(&#39;asyncA&#39;); }, 2000);
  });
}

function asyncFuncB() {
  return new Promise(function(r) {
    setTimeout(() =&gt; { r(&#39;asyncB&#39;); }, 1000);
  });
}

class AsyncController {

  render(template, data) {
    return new Promise(function(resolve, reject) {
      // Do render stuff
      resolve({ t: template, d: data });
    });
  }

  asyncAction(route) {
    return asyncFuncA()
      .then(function(a) {
        return asyncFuncB()
          .then(b =&gt; { return [ a, b ]; });
      })
      .then(data =&gt; { return this.render(&#39;route&#39;, data); });
  }

}

let c = new AsyncController();

c.asyncAction()
  .then((obj) =&gt; { console.log(`${obj.d[0]} + ${obj.d[1]}`); });
</code></pre>
<p>We&#39;re looking at a Controller class with a couple of actions. The <code>asyncAction</code> function of <code>AsyncController</code> is what we&#39;re interested in. The action resolves two promises, one after the other, before calling <code>render</code> with the results of the two promises. In a <a href="/blog/2015/04/29/empty-promises-dos-and-donts-of-es6-promises/">previous article</a>, we already removed a couple of callbacks with <code>Promise.all</code>.</p>
<pre><code class="lang-js"> asyncAction(route) {
    return Promise.all([ asyncFuncA(), asyncFuncB() ])
      .then(data =&gt; { return this.render(&#39;route&#39;, data); });
  }
</code></pre>
<p>A lot cleaner, but we can do better. <code>async</code> and <code>await</code> are keywords that, when used together, allow you to write asynchronous code without callbacks. <code>async</code> creates a container, within which you can execute promises (prefixed with <code>await</code>) that halt the current scope, until the promises have resolved. The resulting values of said promises are returned in the same way would expect a synchronous function to behave.</p>
<p>What is important, is that this only happens within the <code>async</code> container, which is itself becomes a promise. In the following example <code>p</code> and <code>a</code> are roughly equivalent.</p>
<pre><code class="lang-js">function p() {
  return Promise.resolve(&#39;hello world&#39;);
}

async function a() {
  return &#39;hello world&#39;;
}

p().then((r) =&gt; { console.log(r); });
a().then((r) =&gt; { console.log(r); });
</code></pre>
<p>What I think is particularly neat, is that class functions can also be decorated with <code>async</code>. So we can use this &#39;syntastical&#39; sugar on our original example to create:</p>
<pre><code class="lang-js">  async asyncAction(route) {
    return this.render(route, [ await asyncFuncA(), await asyncFuncB() ]);
  }
</code></pre>
<p>The code above is equivalent to the <code>asyncAction</code> functions of the previous examples. I mean, pure, wow factor. It&#39;s so awesome, I&#39;m giddy. Deep breaths, carry on. <code>asyncFuncA</code> and <code>asyncFuncB</code> are both functions that return promises. These promises both return simple strings, after different timeout periods, during which time the <code>asyncAction</code> function&#39;s execution is halted. After the promises has resolved, the final value is returned to current scope and execution continues, as if the <code>await</code> functions were synchronous.</p>
<p>This new functionality has taken promises to a whole new level for me. The <code>async</code> function by itself, removes the need for repetitive <code>Promise</code> declarations. Combined with <code>await</code>, we get asynchronous code that is as easy to read as synchronous code. And no callbacks!</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/05/20/simple-routing-with-javascript-decorators/"/>
    <updated>2015-05-20T22:30:57+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/05/20/simple-routing-with-javascript-decorators/</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR:</strong>I&#39;ve used decorators to generate a bunch of routes from a class.</em></p>
<p>I can&#39;t decide whether this is a legitimate use for decorators, but I knew from the moment I saw this crazy syntax that this was want I wanted to achieve.</p>
<!-- More -->
<h2 id="what-s-what-">What&#39;s what?</h2>
<p>In a lot of my app projects, I chuck my actions into a series of classes which extend a simple class called <code>Controller</code>. My old code for <code>Controller</code> is below and as you can see, it exposes an empty array of actions.</p>
<pre><code class="lang-javascript">class Controller {

    actions() {
        return [];
    }

    constructor(app = {}) {
        this.app = app;
    }

}
</code></pre>
<p>The idea is that in the extended class, you add &#39;action&#39; functions, that you then list in the overridden array. See the example <code>NotesController</code> below.</p>
<pre><code class="lang-javascript">class NotesController extends Controller {

    actions() {
        return [
            { match: &#39;note&#39;, action: &#39;show&#39; },
            { match: &#39;notes/create&#39;, action: &#39;create&#39; },
            { match: &#39;notes/new&#39;, action: &#39;new&#39; }
        ];
    }

    show(id) {

    }

    create(params, data, $form) {

    }

    new() {

    }

    doSomethingUseful() {

    }

}
</code></pre>
<p><code>NotesController</code> now advertises which routes it&#39;s setup to listen to. Any function not listed n the array is ignored and assumed to be a helper method of some kind. This has alway felt a bit clunky, specifically I didn&#39;t like:</p>
<ol>
<li>Overriding a function, whose sole purpose to create and return a new array each time it&#39;s called. During the application lifecycle it&#39;s typically only called once, but that&#39;s not the point. I could have used class properties, but it&#39;s still quite a new feature for Babel. I could have used <a href="http://www.typescriptlang.org/">TypeScript</a> I guess, but <a href="http://www.sublimetext.com/3">Sublime Text</a> tooling for TS has not been a positive experience and I&#39;m not ready to switch to <a href="https://code.visualstudio.com/">Visual Studio Code</a>, yet.</li>
<li>The repetition of writing a function, then list it in an array. #boring.</li>
</ol>
<h2 id="so-what-s-what-now-">So, what&#39;s what now?</h2>
<p>Glad you asked. I&#39;ve basically ripped off the <code>autobind</code> example from the <a href="http://babeljs.io/blog/2015/03/31/5.0.0/#stage-1:-decorators">Babel 5.0.0 blog post</a> and created  a new decorator called <code>route</code>. Checkout the code for <code>route</code> below.</p>
<pre><code class="lang-javascript">function route(route) {
    return function(target, key, descriptor) {
        var fn = descriptor.value;

        delete descriptor.value;
        delete descriptor.writable;

        if (!route) {
            route = key;
        }

        descriptor.get = function() {
            var bound = fn.bind(this, route);

            Object.defineProperty(this, key, {
                configurable: true,
                writable: true,
                value: bound
            });

            return bound;
        };

        if (!target.routes) {
            target.routes = [];
        }

        target.routes.push({ match: route, action: key });

    };
}
</code></pre>
<p>The differences between this decorator and the <code>autobind</code> example are:</p>
<ol>
<li><code>route</code> takes an optional parameter (also called <code>route</code>), that allows you to specify the route to be matched. Optional, in that if missed out, the decorator assumes the name of the action, is also the route.</li>
<li>An array of the routes is managed on the instance of the controller, so the array is an instance property now.</li>
<li>I&#39;m passing the <code>route</code> param to the function, as it&#39;s often useful to know the route in the function.</li>
</ol>
<p>Let&#39;s see the new code:</p>
<pre><code class="lang-javascript">// Controller Class
class Controller {

    constructor(app = {}) {
        this.app = app;

        // In case no routes are specified
        if (!this.routes) {
            this.routes = [];
        }
    }

}

// NotesController Class
class NotesController extends Controller {

    @route(&#39;note&#39;)
    show(id) {

    }

    @route(&#39;notes/create&#39;)
    create(params, data, $form) {

    }

    @route()
    new() {

    }

    doSomethingUseful() {

    }

}
</code></pre>
<p>You can see, no more <code>actions</code> function, no more verbose listing of the functions. I&#39;ve intentionally left out the value of the <code>new</code> route, to demonstrate how the &#39;implied&#39; routing works. If you run the code above in the Babel <a href="http://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=function%20route\(route\">REPL</a>%20%7B%0A%09return%20function(target%2C%20key%2C%20descriptor)%20%7B%0A%09%09var%20fn%20%3D%20descriptor.value%3B%0A%0A%09%09delete%20descriptor.value%3B%0A%09%09delete%20descriptor.writable%3B%0A%0A%09%09if%20(!route)%20%7B%0A%09%09%09route%20%3D%20key%3B%0A%09%09%7D%0A%0A%09%09descriptor.get%20%3D%20function()%20%7B%0A%09%09%09var%20bound%20%3D%20fn.bind(this%2C%20route)%3B%0A%0A%09%09%09Object.defineProperty(this%2C%20key%2C%20%7B%0A%09%09%09%09configurable%3A%20true%2C%0A%09%09%09%09writable%3A%20true%2C%0A%09%09%09%09value%3A%20bound%0A%09%09%09%7D)%3B%0A%0A%09%09%09return%20bound%3B%0A%09%09%7D%3B%0A%0A%09%09if%20(!target.routes)%20%7B%0A%09%09%09target.routes%20%3D%20%5B%5D%3B%0A%09%09%7D%0A%0A%09%09target.routes.push(%7B%20match%3A%20route%2C%20action%3A%20key%20%7D)%3B%0A%0A%09%7D%3B%0A%7D%0A%0Aclass%20Controller%20%7B%0A%0A%09constructor(app%20%3D%20%7B%7D)%20%7B%0A%09%09this.app%20%3D%20app%3B%0A%0A%09%09if%20(!this.routes)%20%7B%0A%09%09%09this.routes%20%3D%20%5B%5D%3B%0A%09%09%7D%0A%09%7D%0A%0A%7D%0A%0A%2F%2F%20NotesController%20Class%0Aclass%20NotesController%20extends%20Controller%20%7B%0A%0A%09%40route(&#39;note&#39;)%0A%09show(id)%20%7B%0A%0A%09%7D%0A%0A%09%40route(&#39;notes%2Fcreate&#39;)%0A%09create(params%2C%20data%2C%20%24form)%20%7B%0A%0A%09%7D%0A%0A%09%40route()%0A%09new()%20%7B%0A%0A%09%7D%0A%09%0A%09doSomethingUseful()%20%7B%0A%09%0A%09%7D%0A%0A%7D%0A%0Aconsole.log(new%20NotesController().routes)), you should get the output below:</p>
<pre><code class="lang-javascript">[
    {&quot;match&quot;:&quot;note&quot;,&quot;action&quot;:&quot;show&quot;},
    {&quot;match&quot;:&quot;notes/create&quot;,&quot;action&quot;:&quot;create&quot;},
    {&quot;match&quot;:&quot;new&quot;,&quot;action&quot;:&quot;new&quot;}
]
</code></pre>
<p>With the exception of <code>new</code>, the array is identical to that of the first example. That be some nice ass syntactic sugar. The future rocks. Peace out.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/29/empty-promises-dos-and-donts-of-es6-promises/"/>
    <updated>2015-04-29T22:10:03+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/29/empty-promises-dos-and-donts-of-es6-promises/</id>
    <content type="html"><![CDATA[<p><em><strong>UPDATE 14/06/15:</strong> Realised the existence of <code>Promise.resolve</code>, added info on <code>Promise.all</code>.</em></p>
<p>There is so much I love about the functionality and syntax coming through under the banner of ES6. One such piece of functionality, is the &#39;Promise&#39;. Promises are not something that needs to be transpiled, as of writing, <a href="http://caniuse.com/#feat=promises">all but IE and Opera Mini have support</a> out of the box. The stragglers can be polyfilled <a href="https://github.com/jakearchibald/es6-promise">quite</a> <a href="https://github.com/taylorhakes/promise-polyfill">easily</a>.</p>
<p>What follows, are three tips for using promises more effectively.</p>
<!-- More -->
<h2 id="chain-don-t-nest">Chain, don&#39;t nest</h2>
<p>When I first started playing with promises, I found myself nesting code blocks more than I would have liked. Code like:</p>
<pre><code class="lang-js">class Example {

    saveData(data) {
        return new Promise(function(resolve, reject) {
            // Save Data
            resolve(data);
        });
    }

    getFromWeb(id) {
        return new Promise(function(resolve, reject) {
            // Get from web
            resolve(data);
        });
    }

    display(id) {
        let self = this;
        return new Promise(function(resolve, reject) {
            self.getFromWeb(id)
                .then(function(data) {
                    self.saveData(data)
                        .then(function(data) {
                            // Display somewhere
                            resolve();
                        });
                });
        });
    }
}

new Example().display(1);
</code></pre>
<p>Not very readable and not making great use of screen real estate, when you can actually do:</p>
<pre><code class="lang-js">display(id) {
    let self = this;
    return self.getFromWeb(id)
        .then(function(data) {
            return self.saveData(data);
        })
        .then(function(data) {
            // Display somewhere
            return data;
        });
}
</code></pre>
<p>The <code>display</code> function is doing exactly the same, but now the functionality is chained. The second <code>then</code> function deals with the display logic, before returning the data param, enabling the <code>display</code> function to be chained itself:</p>
<pre><code class="lang-js">new Example().display(1).then((data) =&gt; { /* Work on data */ console.log(&#39;async finished&#39;); });
</code></pre>
<h2 id="empty-promises">Empty Promises</h2>
<p>I&#39;m one of those people who has never read a VCR manual. I pick up and do, realising only years later, that I didn&#39;t need to rush home every time I wanted to record something, because the VCR had a timer. I once wrote a really handy little function in SQL called <code>VALUENULL</code>, for dealing with NULL values. I can&#39;t believe that sort of functionality wasn&#39;t built in, oh wait, <a href="https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=isnull%20sql">ISNULL</a>.</p>
<p>Well, I find myself in that place again. After triumphing that I&#39;d come up with such a simple way to provide consistent <code>Promise</code> returning functions with <code>Util.emptyPromise</code> (see below), then worring that such a thing might be considered bad practice.</p>
<pre><code class="lang-js">class Util {

    static emptyPromise(val = null) {
        return new Promise((resolve) =&gt; { resolve(val); });
    }

}
</code></pre>
<p>You see, the point of the function is to wrap a value (or no value) around a prefab <code>Promise</code> that always resolves. You would do this if you were creating a non-blocking/asynchronous API on top of synchronous code. Or if you envisaged blocking code becoming asynchronous in the future and wanted to ensure that the public API didn&#39;t feel the affect of such massive breaking changes.</p>
<p>A prime example of this, is when I recently wrote a data layer based on <code>localstorage</code> (which is synchronous), then decided that  <code>localstorage</code> wasn&#39;t cutting the mustard, so replaced with <a href="http://mozilla.github.io/localForage/">localForage</a> (which is <code>Promise</code> based). That weekend is one I won&#39;t forget in a hurry.</p>
<p>My point is, <code>Util.emptyPromise</code> is a less elegant equivalent to the already existing <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">Promise.resolve</a>. I&#39;ll leave this section with the original pun, because it still makes me chuckle.</p>
<p>The function is poorly named, because it can return a value. I just like the pun. An example of the pun in action:</p>
<pre><code class="lang-js">class Election {

    fullOf() {
        return Util.emptyPromise()
            .then(() =&gt; { return Util.emptyPromise(); });
    }

}
</code></pre>
<h2 id="promise-all">Promise.all</h2>
<p>You may want to check up my sleeves at this point, because I&#39;m about to make bunnies appear out of thin air.</p>
<p>&#39;Callbacks&#39; is just something you do if you&#39;re writing non-blocking JavaScript. Calllbacks, within callbacks, within callbacks. Callbacks are there so that you can control the flow of some logic, which has a dependancy on asynchronous code (like an Ajax request), that will take you away from the main &#39;blocking&#39; execution thread.</p>
<p>Promises take these callbacks and makes them look a lot prettier, while also providing a platform for deferring the attachment of callbacks. The following example still fires the <code>console.log</code>, even though the callback is attached after the <code>Promise</code> has already resolved.</p>
<pre><code class="lang-js">var p = Promise.resolve();
p.then(function() { console.log(&#39;test&#39;); });
</code></pre>
<p>But there is still room to make our code damn right gorgeous. Consider the following code:</p>
<pre><code class="lang-js">function asyncFuncA() {
  return new Promise(function(r) {
    setTimeout(() =&gt; { r(&#39;asyncA&#39;); }, 2000);
  });
}

function asyncFuncB() {
  return new Promise(function(r) {
    setTimeout(() =&gt; { r(&#39;asyncB&#39;); }, 1000);
  });
}

class AsyncController {

  render(template, data) {
    return new Promise(function(resolve, reject) {
      // Do render stuff
      resolve({ t: template, d: data });
    });
  }

  asyncAction(route) {
    return asyncFuncA()
      .then(function(a) {
        return asyncFuncB()
          .then(b =&gt; { return [ a, b ]; });
      })
      .then(data =&gt; { return this.render(&#39;route&#39;, data); });
  }

}

let c = new AsyncController();

c.asyncAction()
  .then((obj) =&gt; { console.log(`${obj.d[0]} + ${obj.d[1]}`); });
</code></pre>
<p>Looking at the <code>asyncAction</code>. <code>asyncFuncA</code> and <code>asyncFuncB</code> are chained by calling <code>asyncFuncB</code> within the callback of <code>asyncFuncA</code>. The call to the <code>render</code> function starts on a separate tree, consuming the response of both asynchronous functions. A rocky sort of waterfall.</p>
<pre><code>asyncAction
    --&gt; asyncFuncA
            --&gt; asyncFuncB
        --&gt; render
</code></pre><p>We can achieve the same with the function below. The second asynchronous function no longer has a dependancy on the first, and we only have to call <code>then</code> once.</p>
<pre><code class="lang-js"> asyncAction(route) {
    return Promise.all([ asyncFuncA(), asyncFuncB() ])
      .then(data =&gt; { return this.render(&#39;route&#39;, data); });
  }
</code></pre>
<pre><code>asyncAction
    --&gt; asyncFuncA
    --&gt; asyncFuncB
        --&gt; render
</code></pre><p>Pretty hot!</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/25/a-punnet-size-guide-to-git-cherry-picking/"/>
    <updated>2015-04-25T10:10:55+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/25/a-punnet-size-guide-to-git-cherry-picking/</id>
    <content type="html"><![CDATA[<p>I&#39;d just finished a load of work on a project. I&#39;d made my commit and was a about to push to origin, when I noticed I was on the wrong branch.</p>
<p><em>What a numpty.</em></p>
<p>Why this happened, is probably a good subject for another post. What I want to talk about is how I resolved the issue.</p>
<!-- More -->
<h2 id="sitrep">Sitrep</h2>
<p>The situation was that I had two branches; <code>develop</code>, my intended branch and <code>wrong-branch</code>, the branch I actually committed to. <code>wrong-branch</code> was the product of bad practice on my part, luckily it was up-to-date with <code>develop</code>, give or take a couple of small amends. <code>wrong-branch</code> had itself a number of commits, in amongst merges from the <code>develop</code>, that I didn&#39;t want merging back into <code>develop</code>.</p>
<pre><code>----------------        develop
    \----\-----\---        wrong-branch
</code></pre><p>Ideally, I wanted to pick the very last commit on <code>wrong-branch</code> and append it to end of <code>develop</code>. The contents of the commit was mostly in isolation of the rest of the project, so I didn&#39;t expect any conflicts.</p>
<h2 id="precautions">Precautions</h2>
<p>So, what did I do? Firstly, I took two precautionary steps:</p>
<h3 id="1-update-wrong-branch-with-develop-">1. Update <code>wrong-branch</code> with <code>develop</code></h3>
<p>I wanted to reduce the risk of conflict, so I made sure <code>wrong-branch</code> had the latest updates from <code>develop</code>.</p>
<pre><code class="lang-bash">git checkout wrong-branch
git merge develop
</code></pre>
<h3 id="2-made-a-copy-of-develop-in-case-anything-went-wrong">2. Made a copy of <code>develop</code>, in case anything went wrong</h3>
<pre><code class="lang-bash">git checkout develop
git checkout develop-tmp
</code></pre>
<h2 id="first-crack">First crack</h2>
<p>Did I mention, that this is the first time I&#39;ve attempted a cherry pick? In order to perform a cherry pick, you need the hash of the commit you want to grab. The hash will look something like  <code>d736fa95b41a36f5c59074afdbc773d60ca5a99b</code>, or the shortened version <code>d736fa9</code>. You can get this from <code>git log</code>.</p>
<pre><code class="lang-bash">git checkout develop-tmp
git cherry-pick d736fa9
</code></pre>
<p>The second line of the example above resulted in the following error:</p>
<pre><code class="lang-bash">... is a merge but no -m option was given.
</code></pre>
<h2 id="getting-it-right">Getting it right</h2>
<p>The <code>-m</code> option allows for a parent number. A commit&#39;s parent is essentially the commit&#39;s predecessor, usually the commit that spawned the current commit. On a branch, the parent number starts at 1, and increases as you go back along the tree. So, if you wanted to append the commit to the end of the branch, use &#39;-m 1&#39;.</p>
<p>Let&#39;s give it another go:</p>
<pre><code class="lang-bash">git checkout develop-tmp
git cherry-pick -m 1 d736fa9
</code></pre>
<p>Huzzah! It worked. If you had any conflicts at this point, now is the time to resolve and commit. Then, all that is left, is to merge into the primary <code>develop</code> branch.</p>
<pre><code class="lang-bash">git checkout develop
git merge develop-tmp
git branch -D develop-tmp
</code></pre>
<p>The end.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/21/there-is-no-spoon/"/>
    <updated>2015-04-21T22:25:32+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/21/there-is-no-spoon/</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR:</strong>I&#39;m using a scene from the movie, The Matrix, as a metaphor for dealing with self doubt. Nifty.</em></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uAXtO5dMqEI" frameborder="0" allowfullscreen></iframe>

<!-- More -->
<h2 id="the-epiphany">The epiphany</h2>
<p>Watching &#39;the spoon&#39; scene from The Matrix for the first time, it was one of those zen moments when the universe gets a little bit clearer. I suspect, if there is a true interpretation to the scene, mine is a little off. Essentially though, I believe that the spoon simultaneously represents a goal and the inability to achieve that goal. The spoon is there and you want to move it, but you can&#39;t, because you can&#39;t perceive it as anything more malleable than a spoon. The truth is, &quot;there is no spoon&quot;. There is only your perception of a spoon. So for the spoon to bend, it is you who must bend.</p>
<p>The epiphany I had, was not that I can now bend spoons. I can&#39;t, at least I don&#39;t think I can. It&#39;s not say I&#39;m not suspicious sometimes, but as far as I know, I&#39;m not in The Matrix. I really like steak though, so I would I want to leave if I was? My epiphany, was that I see the spoon everyday.</p>
<p>I&#39;ve been tempted to prattle on for the rest of this post about how I see the spoon in every facet of my life, which is true. But it was looking very much like an incoherent ramble. So I&#39;ve tried to focus on how &#39;the spoon&#39; affects my work as a software developer, and what I do to see past the spoon. I will attempt to drop references to &#39;the spoon&#39;, at the first available opportunity.</p>
<h2 id="the-stages-of-the-spoon">The stages of the spoon</h2>
<p>In my work, when I am working through a new project, I typically go through these stages:</p>
<ol>
<li><strong><em>Excitement</em></strong>, as I enthuse over the possibilities for implementation. &lt;-- The project is the spoon, the possibilities are my desire to bend the spoon.</li>
<li><strong><em>Worry</em></strong>, that I&#39;ve gotten ahead of myself, promised the world, only to deliver Keighley (sorry Keighley, it&#39;s not that you&#39;re bad, you&#39;re just not to the world). &lt;-- This is my perception of the spoon as an unbending instrument of breakfast.</li>
<li><strong><em>Focus</em></strong>, as I get over myself and get the work done. &lt;-- This is me going all kung-fu on the spoon&#39;s ass (bottom, not donkey).</li>
<li><strong><em>Mission accomplished</em></strong>. &lt;-- Spoon, moved.</li>
</ol>
<p>I certainly hope for step 4, and I hope steps 1-3 aren&#39;t a million miles away from most other people. But how does one see through the spoon? On some projects by the time I start step 3, I&#39;ve all but smashed my self confidence to pieces. Step 3 can sometimes be driven by fear that you might not live up to your own expectations and pigheadedness that you won&#39;t allow the project to fail!</p>
<h2 id="getting-through-it">Getting through it</h2>
<p>So how do I get through step 2? These are the things I do, that keep me going through bouts of insecurity.</p>
<h3 id="scare-yourself">Scare yourself</h3>
<p>So it turns out that Mary Schmich, <a href="http://quoteinvestigator.com/2013/08/09/scare/">not Eleanor Roosevelt</a> said &quot;Do One Thing Every Day That Scares You&quot;. I never sit still when it comes to development. The moment I feel too comfortable, I become restless. I push myself to learn something new in every project I do. I&#39;m not particularly self motivated when it comes to personal projects, so I&#39;ve also always used work as my driver.</p>
<p>I went for a job interview once, sonn after I&#39;d switched from VB to VB.NET. The Interviewer asked why I&#39;d chosen VB.NET instead of C#. I explained that VB.NET seemed like the more obvious choice, because of it&#39;s simularities with what I already knew. He felt that it was all the more reason to dive into C#. I didn&#39;t get the job, but I did learn C#.</p>
<p>Visual Studio suddenly became incredible, around 2003. I used to joke that I could write a complete application without ever finishing a word. &#39;da, da, tab, da, da, tab&#39;. VS was great and I loved working in it, but I was becoming increasingly scared of the outdoors. I started programming Classic ASP in Notepad, but now I wasn&#39;t sure it was even possible to compile my applications outside of VS. I was spoilt, too used to using Enterprise editions, to ever be happy in the free version. &quot;I can&#39;t use Express, it doesn&#39;t support Solutions!&quot;</p>
<p>My reaction, was to start messing around with Ruby, but in a text editor, rather than a full blown IDE. A very liberating experience. I&#39;ve not looked back, it&#39;s probably been about 5 years since I worked with .NET in earnest.</p>
<h3 id="own-it">Own it</h3>
<p>There really isn&#39;t anything more important to the resolution of a task, than feeling like you own it. Without ownership, you make yourself powerless. The spoon will never bend, unless you own that mother hubbard.</p>
<p>The best example of ownership I can give you, is a plugin. Let&#39;s say, you&#39;ve been asked to put an image slider into a website. You could build it from scratch, but client expectations outweigh their budget. Anyway, there really is no point reinventing the wheel; it feels like I come across a new slider plugin everyday. You implement the plugin. It&#39;s really cool, doing all this neat stuff, as if by magic. The client is really happy, but it&#39;s not working so great on IE &#39;whatever&#39; under some obscure scenario, so you need to change it.</p>
<p>It&#39;s magic though, it&#39;s doing this thing here, and this thing there. It&#39;s crazy black magic and you&#39;re a fraud for even sticking it in the site, because you didn&#39;t create the magic, you pasted it in and hoped for the best. If you&#39;re thinking like this, it&#39;s safe to say, you&#39;re not really &#39;owning it&#39;.</p>
<p>It&#39;s not magic, it&#39;s JavaScript, probably a jQuery plugin. You could swap out that plugin, that is definitely an option. Or, checkout the documentation to see if there is a setting you can tweak. But you know, sometimes you&#39;ve just got to crack open the code and see what&#39;s going on. The investigation may just throw up some assumption, made by the plugin, that you can cater for in the outer project. But maybe you&#39;ll find yourself a bug that you can fix or report. Whether you&#39;re logging a bug, creating a pull request, or forking the whole plugin, you&#39;re owning it.</p>
<h2 id="in-summary">In summary</h2>
<p>I&#39;m not really comfortable with these sorts of posts, they tend to sound a bit preachy. It is something I feel quite strongly about though. Ultimately in development, as in life, the only obstacle is the one you create yourself. Change your perception of the task, take control of it and push yourself to take a different approach. There is no spoon.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/12/consuming-es6-modules-in-npm-packages/"/>
    <updated>2015-04-12T14:06:12+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/12/consuming-es6-modules-in-npm-packages/</id>
    <content type="html"><![CDATA[<p>I&#39;m going to have to start coming up with more interesting title for my posts. My eyes are watering at the thought of &#39;Consuming ES6 modules in NPM packages&#39;. Maybe something more exciting, like &#39;Munching on the nuggets of next gen wonderment&#39;. I&#39;ll work on it.</p>
<p>In this post I&#39;m going to describe how you can make use of <a href="https://babeljs.io/">Babel&#39;s</a> support for <a href="https://babeljs.io/docs/learn-es6/#modules">ES6 modules</a>, and how you might consume them as <a href="https://www.npmjs.com/">NPM</a> packages. It&#39;s pretty neato stuff and makes for very clean code. Read on!</p>
<!-- more -->
<p><em><strong>TL;DR:</strong>Scroll down to the <a href="http://www.starwars.com/">Star Wars</a> reference for the actual tutorial.</em></p>
<p><em><strong>NOTE:</strong>This tutorial has two <a href="https://github.com/">Github</a> repos, <a href="https://github.com/kim3er/example-es6-module">this one</a> and <a href="https://github.com/kim3er/example-module-consumer">this one</a>.</em></p>
<p>Modules have existed in JS space for a while now. I&#39;ve dabbled in the past, because I&#39;m a big fan of results, I mean who wouldn&#39;t be?</p>
<ul>
<li>Keeps junk out of the global scope</li>
<li>Only load what you need</li>
<li>Inferred order of compilation</li>
</ul>
<p>I&#39;m just going to pick up on that last point for a moment. While I dabbled, I never really embraced modules as part of a longer term strategy. My reluctance was due to inherent ugliness of implementation, with anything but Node&#39;s <code>require</code> and <code>exports</code> syntax. The ugliness is there to make these great ideas work in the browser.</p>
<p>Using the fantastic <a href="https://jquery.com/">jQuery</a> as an example, stuff like:</p>
<pre><code class="lang-js">    if ( typeof module === &quot;object&quot; &amp;&amp; typeof module.exports === &quot;object&quot; ) {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require(&quot;jquery&quot;)(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory( global, true ) :
            function( w ) {
                if ( !w.document ) {
                    throw new Error( &quot;jQuery requires a window with a document&quot; );
                }
                return factory( w );
            };
    } else {
        factory( global );
    }
</code></pre>
<p>and</p>
<pre><code class="lang-js">// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === &quot;function&quot; &amp;&amp; define.amd ) {
    define( &quot;jquery&quot;, [], function() {
        return jQuery;
    });
}
</code></pre>
<p>and</p>
<pre><code class="lang-js">// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
}
</code></pre>
<p>I get why it&#39;s all there, and I appreciate the efforts teams like jQuery put into compatibility with all of these different systems. I have benefitted from those efforts on many occasions. I bet it&#39;s a pain in the backside to maintain, it&#39;s very clever, but also, U-G-L-Y.</p>
<h3 id="flashback-wavy-lines-">Flashback (wavy lines)</h3>
<p>I was drawn back into the fold, as the result of a recent ES6 based project I&#39;ve been working on. I was gorging on the beautiful ES6 class syntax, doing a fine job of controlling compilation through the use of sub folders.</p>
<p>As an example, the classes in directories &#39;controller&#39; and &#39;model&#39;, inherit from directory &#39;base&#39;. Classes in &#39;controller&#39; can reference classes in &#39;model&#39;, but not the other way around.</p>
<pre><code class="lang-bash">root
    base            &lt;-- Compile first
    controller        &lt;-- Compile third
    model            &lt;-- Compile second
</code></pre>
<p>``` js base/base_class.js
class BaseClass {
    parent()  {
        console.log(&#39;something interesting&#39;);
    }
}</p>
<pre><code>
``` js controller/app_controller.js
class AppController extends BaseClass {
    action()  {
        let user = new UserModel();
        console.log(&#39;I\&#39;m an action&#39;);
    }
}
</code></pre><p>``` js model/user_model.js
class UserModel extends BaseClass {
    constructor() {
        this.parent();
        console.log(&#39;I\&#39;m a model&#39;);
    }
}</p>
<pre><code>
This all worked great, better than great, I was king of the world. Until I needed to create `BaseController`, that extends `BaseClass` and is extended by `AppController`.

``` js controller/base_controller.js
class BaseController extends BaseClass {
    defaultAction()  {
        console.log(&#39;I\&#39;m a default action&#39;);
    }
}
</code></pre><p>``` js controller/app_controller.js
class AppController extends BaseController {
    action()  {
        this.defaultAction();
    }
}</p>
<pre><code>
Due to the dreaded alphabet, `AppController` compiles before `BaseController`. Arrrgh. Why world, would you treat me this way?!

``` bash
controller
    app_controller.js        &lt;-- Attempts to compile first, but BaseController doesn&#39;t exist yet
    base_controller.js        &lt;-- Waits patiently
</code></pre><p>Don&#39;t tell anyone, but my initial fix was to:</p>
<pre><code class="lang-bash">controller
    0.base_controller.js    &lt;-- Compiles first
    app_controller.js        &lt;-- Compiles second
</code></pre>
<p>I kidded myself for a while that this was a valid design decision, until maybe my third or forth &#39;zero dot&#39; file. I needed a better way of controlling the order of compilation; it also felt like those base classes could be reused.</p>
<h2 id="and-so-it-begins-destroy-them-destroy-them-all-">And so, it begins. Destroy them, destroy them all.</h2>
<p>We&#39;re going to create two projects; the <a href="https://github.com/kim3er/example-es6-module">module</a> and the <a href="https://github.com/kim3er/example-module-consumer">consumer</a>.</p>
<h3 id="the-module">The module</h3>
<p>The module package will be written in ES6 JavaScript, but will need to be transpilied to ES5, for compatibility. So the ugliness is still there, just hidden. We&#39;ll use <a href="http://gulpjs.com/">Gulp</a> and Babel for the build.</p>
<h4 id="the-setup">The setup</h4>
<p>I&#39;ve created a directory called &#39;blog&#39;, in here I&#39;m writing the following, in terminal:</p>
<pre><code class="lang-bash">mkdir es6-module
cd es6-module
npm init                        &lt;-- Just enter through the defaults
mkdir src
touch gulpfile.js .gitignore
</code></pre>
<p>Your project should look like:</p>
<pre><code class="lang-bash">es6-module
    src                    &lt;-- This is where we\&#39;re going to put our ES6
    .gitignore            &lt;-- We\&#39;ll need to ignore \&#39;node-modules\&#39;, when this goes to GIT
    gulpfile.js            &lt;-- Gulp build file
    package.json        &lt;-- This was created when you typed in \&#39;npm init\&#39;
</code></pre>
<p>Make &#39;.gitignore&#39; look this:</p>
<p>``` text .gitignore
node_modules</p>
<pre><code>
Change the `main` option in &#39;package.json&#39; to read &#39;./lib/index.js&#39;. A &#39;lib&#39; directory will be created as part of the build process, which will contain our ES5 code.

``` json
{
    ....
    &quot;main&quot;: &quot;./lib/index.js&quot;,
    ....
}
</code></pre><p><code>main</code> is the entry point to our package. In a consumer, if you were to <code>require(&#39;es6-module&#39;)</code>, you&#39;ll get the exports from the <code>main</code> file.</p>
<h4 id="the-build-script">The build script</h4>
<p>We need a build script in our &#39;gulpfile.js&#39;.</p>
<p>``` js gulpfile.js
var gulp = require(&#39;gulp&#39;),
    del = require(&#39;del&#39;),
    babel = require(&#39;gulp-babel&#39;);</p>
<p>var SRC_PATH = &#39;./src&#39;,
    LIB_PATH = &#39;./lib&#39;;</p>
<p>gulp.task(&#39;clear&#39;, function(cb) {
    del([ LIB_PATH + &#39;/*&#39; ], function() {
        cb();
    });
});</p>
<p>gulp.task(&#39;build&#39;, [ &#39;clear&#39; ], function() {
    return gulp.src([ SRC_PATH + &#39;/<em>*/</em>.js&#39; ])
                .pipe(babel({ blacklist: [ &#39;useStrict&#39; ] }))
                .pipe(gulp.dest(LIB_PATH));
});</p>
<p>gulp.task(&#39;default&#39;, function() {
    gulp.start(&#39;build&#39;);
});</p>
<pre><code>
The script has three dependancies:

1. Gulp - The script runner. Like [Grunt](http://gruntjs.com/), but code first.
2. [Del](https://www.npmjs.com/package/del) - A little package for deleting stuff.
3. Babel - ES6 transpiler. Reinvigorated my already deeply unnatural love of JavaScript. Hallelujah.

Install the dependancies like so:

``` bash
npm install -g gulp babel
npm install --save-dev gulp del gulp-babel
</code></pre><p>I think the <code>clear</code> task is self explanatory, so lets talk about <code>build</code>. Typically in a build script, it&#39;s tempting to concatenate, but our package is going to benefit from keeping the code in separate files. By keeping the code in separate files, modular, we&#39;ll be implementing JavaScript module benefit #2 &#39;Only load what you need&#39;.</p>
<p>The code itself is transpiled through Babel, to create the ES6 code in &#39;lib&#39;. I&#39;ve blacklisted &#39;useStrict&#39;. I do this by default, because <code>&quot;use strict&quot;</code> can stop execution in iOS UIWebViews, specifically when using <a href="http://cordova.apache.org/">Cordova</a>.</p>
<h4 id="the-code">The code</h4>
<p>In the src directory, create the following files:</p>
<pre><code class="lang-bash">src
    clever_class.js    &lt;-- An example module
    index.js        &lt;-- Our main file
</code></pre>
<p>``` js src/clever_class.js
export class CleverClass {
    constructor() {
        console.log(&#39;I\&#39;m a clever class&#39;);
    }
}</p>
<pre><code>
``` js src/index.js
export * from &#39;./clever_class&#39;;
</code></pre><p><em>I think you can already see how useful our new package is going to be.</em></p>
<p><code>CleverClass</code> is pretty unexceptional, except for the addition of <code>export</code> before the <code>class</code> declaration. <code>export</code> tells Babel that we want to reference <code>CleverClass</code> as module.</p>
<p>The code in &#39;index.js&#39; is really interesting. We&#39;re literally creating an index to all modules in our package, that we want made public. <code>export * from</code> (not <code>import</code>), re-exports <code>CleverClass</code> as part of &#39;index.js&#39;.</p>
<p>Think about the implications here. You can have twenty different classes in this directory, all extending each other in different and exciting ways. From &#39;index.js&#39;, you choose which of those classes make it to your public API. <code>CleverClass</code> may inherit from a class called <code>BaseClass</code>, but only <code>CleverClass</code> is accessible, even though <code>CleverClass</code> still benefits from the existence of <code>BaseClass</code>.</p>
<p><em>At this point, you&#39;re starting to feel like Skeletor, just before he was robbed of the powers of Grey Skull.</em></p>
<p>Okay, build the mutha:</p>
<pre><code class="lang-bash">gulp build
</code></pre>
<p>Any errors? No, great. You should now have a &#39;lib&#39; directory that mirrors the structure of &#39;src&#39;, just with ES5 code, instead of ES6.</p>
<p><em><strong>NOTE:</strong>This feels a bit &#39;fly-by the seat of your pants&#39; coding. Usually I&#39;d have a test suite in the project, to ensure that we&#39;re all rocking in the right direction. However, we&#39;re about to build a consumer for exactly that, and for the purposes of this tutorial I wanted to keep concerns clean and avoid duplication. You dig?</em></p>
<h3 id="the-consumer">The consumer</h3>
<p>The purpose of this tutorial is to demonstrate how you can consume ES6 modules, contained within an NPM package. To do this, we need a separate project, from which to consume the package; this is that project.</p>
<h4 id="the-setup">The setup</h4>
<p>From the blog directory:</p>
<pre><code class="lang-bash">mkdir module-consumer
cd module-consumer
npm init                        &lt;-- Just enter through the defaults
mkdir app
touch gulpfile.js .gitignore
</code></pre>
<p>Here is our &#39;.gitignore&#39;:</p>
<p>``` text .gitignore
.web
node_modules</p>
<pre><code>
Here is our directory structure:

``` bash
module-consumer
    app                    &lt;-- This is where we\&#39;re going to put our test app
    .gitignore            &lt;-- We&#39;ll need to ignore \&#39;node-modules\&#39;, when this goes to GIT
    gulpfile.js            &lt;-- Gulp build file
    package.json        &lt;-- This was created when you typed in \&#39;npm init\&#39;
</code></pre><h4 id="the-build-script">The build script</h4>
<p>Our test app is going to be a very simple website, so we&#39;re going to need a web server, in this case <a href="https://github.com/senchalabs/connect">Connect</a>. Because we&#39;re using a website as our testbed, we need to a way to consume the NPM package in a way that the browser understands; for this, we will use <a href="http://browserify.org/">Browserify</a>.</p>
<p>``` js gulpfile.js
var gulp = require(&#39;gulp&#39;),
    connect = require(&#39;gulp-connect&#39;),
    del = require(&#39;del&#39;),
    watch = require(&#39;gulp-watch&#39;),
    runSequence = require(&#39;run-sequence&#39;),
    babelify = require(&#39;babelify&#39;),
    browserify = require(&#39;browserify&#39;),
    source = require(&#39;vinyl-source-stream&#39;);</p>
<p>var APP_PATH = &#39;./app&#39;,
    WEB_PATH = &#39;./.web&#39;;</p>
<p>gulp.task(&#39;clear&#39;, function(cb) {
    del([ WEB_PATH + &#39;/*&#39; ], function() {
        cb();
    });
});</p>
<p>gulp.task(&#39;js&#39;, function() {
    return browserify({
                    entries: APP_PATH + &#39;/app.js&#39;,
                    debug: true
                })
                .transform(babelify)
                .bundle()
                .pipe(source(&#39;app.js&#39;))
                .pipe(gulp.dest(WEB_PATH));
});</p>
<p>gulp.task(&#39;index&#39;, function() {
    return gulp.src([ APP_PATH + &#39;/index.html&#39; ])
        .pipe(gulp.dest(WEB_PATH));
});</p>
<p>gulp.task(&#39;connect&#39;, function(cb) {
    connect.server({
        root: WEB_PATH,
        livereload: true
    });</p>
<pre><code>cb();
</code></pre><p>});</p>
<p>gulp.task(&#39;livereload&#39;, function () {
    return gulp.src( WEB_PATH + &#39;/<em>*/</em>&#39; )
        .pipe(connect.reload());
});</p>
<p>gulp.task(&#39;serve&#39;, [ &#39;clear&#39; ], function(cb) {
    runSequence(
        [ &#39;js&#39;, &#39;index&#39; ],
        &#39;connect&#39;,
        function() {
            watch([ APP_PATH + &#39;/app.js&#39; ], function() { gulp.start(&#39;js&#39;); });
            watch([ APP_PATH + &#39;/index.html&#39; ], function() { gulp.start(&#39;index&#39;); });
            watch([ WEB_PATH + &#39;/<em>*/</em>&#39; ], function() { gulp.start(&#39;livereload&#39;); });</p>
<pre><code>        cb();
    }
);
</code></pre><p>});</p>
<pre><code>
The script has these dependancies:

1. Gulp
2. Gulp Connect - Our web server.
3. Del
4. [Gulp Watch](https://www.npmjs.com/package/gulp-watch) - Kicks off Gulp tasks, when a file changes.
5. [Run Sequence](https://www.npmjs.com/package/run-sequence) - Asynchronous task management. [Read my blog](/blog/2015/03/23/in-the-name-of-gulp/).
6. [Babelify](https://github.com/babel/babelify) - Babel transformer for Browserify.
7. Browserify - Makes Node&#39;s `require` work in the browser.
8. [Vinyl Source Stream](https://www.npmjs.com/package/vinyl-source-stream) - Makes Browserify work with Gulp.

Install them:

``` bash
npm install --save-dev gulp gulp-connect del gulp-watch run-sequence babelify browserify vinyl-source-stream
</code></pre><p>Here&#39;s a quick rundown of the tasks in this script:</p>
<h5 id="js">js</h5>
<p>Transpiles and concatenates the contents of &#39;app/app.js&#39; (not created yet), using Browserify. Browserify follows every <code>require</code>, creates a virtual tree, then bundles all the code in one file.</p>
<p><em>I mean, wow, just wow.</em></p>
<p>We&#39;re not using the <code>require</code> syntax though, so we need Babelify. Babelify transforms/transpiles the ES6 syntax to ES5, for Browserify to understand.</p>
<p>The result of which is outputted to our temporary web directory (&#39;.web&#39;, which doesn&#39;t exist yet).</p>
<h5 id="index">index</h5>
<p>Moves &#39;app/index.html&#39; to &#39;.web/index.html&#39;. You don&#39;t want to be working directly in &#39;.web&#39;.</p>
<h5 id="connect">connect</h5>
<p>Uses Connect to start a web server, with <a href="http://livereload.com/">Live Reload</a>.</p>
<h5 id="livereload">livereload</h5>
<p>Reacts to file changes. Live Reload reloads your browser programmatically. It&#39;s pure magic.</p>
<h5 id="serve">serve</h5>
<p>This is what we type into terminal. It&#39;s a &#39;stitch everything together task&#39;. We use Run Sequence to run our two compilation tasks, <code>js</code> and <code>index</code>, before kicking off the web server task <code>connect</code>. Finally, we set off the file watchers, that react accordingly to file changes.</p>
<h4 id="the-code">The code</h4>
<p>I&#39;m going to start by boilerplating &#39;index.html&#39; in the &#39;app&#39; directory; the sole point of this file is to load &#39;app.js&#39;.</p>
<p>``` html app/index.html
&lt;!DOCTYPE html&gt;</p>
<p><html></p>
<p><head>
    <title></title>
    <script type="text/javascript" src="./app.js"></script>
</head></p>
<body>

<p></body>
</html></p>
<pre><code>
Here&#39;s &#39;app.js&#39;.

``` js app/app.js
// Example 1: Namespace
import * as es6 from &#39;es6-module&#39;;

new es6.CleverClass();


// Example 2: Choose exports
// import { CleverClass } from &#39;es6-module&#39;;

// new CleverClass();


// Example 3: Target individual files
// import { CleverClass } from &#39;es6-module/lib/clever_class&#39;;

// new CleverClass();
</code></pre><p>&#39;app.js&#39; contains three examples of how can access &#39;CleverClass&#39; from our first project... Aww crap, hang on a minute, we&#39;ve not actually referenced our &#39;es6-module&#39; package!</p>
<pre><code class="lang-bash">npm install --save-dev ../es6-module
</code></pre>
<p><em><strong>NOTE:</strong>NPM allows you to install local packages, that&#39;s what going on in the code above.</em></p>
<p>What was I saying? Right, three examples. They should all have the same result, but show the flexibility was the ES6 way of doing modules:</p>
<ol>
<li>Namespace - Using <code>as</code>, you can wrap your imports in a namespace. Very tidy.</li>
<li>Be selective - You may only want to use one or two classes, list them in curly brackets!</li>
<li>Don&#39;t pull in the whole library - Prepare to have your mind blown. &#39;Boom&#39;. You can reference individual modules within the package. Don&#39;t say a word, it&#39;s alright, I know. #shhh</li>
</ol>
<p>Run the server and breath in the sweet, sweet smell of success.</p>
<pre><code class="lang-bash">gulp serve
</code></pre>
<p>I accept the payoff is a little underwhelming. If all is well, when you open you dev tool in a browser, pointed at <a href="http://localhost:8080">http://localhost:8080</a>, you should see:</p>
<pre><code class="lang-text">I&#39;m a clever class
</code></pre>
<h3 id="the-conclusion">The conclusion</h3>
<p>That&#39;s not the point. The point is, &quot;I&#39;m a clever class&quot; was written in module in one package, and accessed from a script in another. All the code was written in ES6, and only the files needed, were accessed in the test site.</p>
<p>We&#39;ve gained:</p>
<ol>
<li>A modular build.</li>
<li>A reusable library.</li>
<li>Only compile what you use.</li>
<li>Future proofing, with ES6 compatible base code.</li>
</ol>
<p>We. Are. Awesome.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/04/02/controlling-cordova-from-gulp/"/>
    <updated>2015-04-02T22:39:27+01:00</updated>
    <id>http://rich.k3r.me/blog/2015/04/02/controlling-cordova-from-gulp/</id>
    <content type="html"><![CDATA[<p>It&#39;s a story as old as time. Girl meets boy, boy has an annoying two step build process, spread across two directories. Of course I&#39;m talking about having an awesome <a href="http://gulpjs.com/">Gulp</a> workflow, with a Cordova project clumsily tacked on the side. Well, no more, now you can integrate <a href="http://cordova.apache.org/">Cordova</a>! into Gulp! Yay!</p>
<!-- more -->
<p><em><strong>NOTE:</strong>You see the code over at <a href="https://github.com/kim3er/cordova-gulp">Github</a>.</em></p>
<p>Let&#39;s discuss the problem first. Until recently, Gulp and Cordova were two separate Node based, command line powered worlds to me, with seemingly nothing in common. In the given scenario, I&#39;d typically have a two directory structure:</p>
<pre><code>app                &lt;-- Source files for the project
cordova            &lt;-- Cordova root directory
    - www        &lt;-- Cordova app directory
gulpfile.js
</code></pre><p>Gulp would take care of transpiling the code in the <code>app</code> directory and transferring the spoils to <code>cordova/www</code>. Cordova is then responsible for building the Cordova project and delivering the app to an emulator.  Something like:</p>
<pre><code class="lang-bash">gulp
cd ./cordova
cordova emulate
cd ../
</code></pre>
<p>Before switching to Gulp, I used to use Middleman for a lot of the transpiling tasks, where I&#39;d maintain a number of bash scripts to create the illusion of cohesion. It didn&#39;t feel right when I switched to Gulp though. There must be some similarity between these disparate Node based, command line tools. What was I missing?</p>
<p>You know what I realised? That Gulp is based on Node and so is Cordova; so I can probably access Cordova directly from within my Gulp task. It&#39;s never going to be that easy, is it?</p>
<p>Well, it&#39;ll be a disappointment if it wasn&#39;t that easy. So long story short, it almost is. To demonstrate, I&#39;m going to cook up a quick project, to demonstrate the integration:</p>
<pre><code class="lang-bash">npm init
touch gulpfile.js
npm install -g cordova gulp ios-deploy
npm install --save-dev gulp cordova-lib del
cordova create ./cordova me.k3r.cordgulp CordovaGulp
</code></pre>
<p>Accept all the defaults on <code>npm install</code>, if you&#39;re not sure how to answer. All it does is create your <code>package.json</code> and settings can be easily changed at any time.</p>
<p>The <code>-g</code> means install globally, and the <code>--save-dev</code> will save the packages as development dependancies within the <code>package.json</code>. Have a look, you&#39;ll see what I mean.</p>
<p><a href="https://github.com/phonegap/ios-deploy">ios-deploy</a> is neat if you&#39;re on a Mac and want to deploy from script or command line to iOS.</p>
<p>The last line scaffolds a basic Cordova project.</p>
<p>Paste in the following to your newly created <code>gulpfile.js</code>, but don&#39;t run anything yet!</p>
<pre><code class="lang-js">var gulp = require(&#39;gulp&#39;)
    del = require(&#39;del&#39;),
    cordova = require(&#39;cordova-lib&#39;).cordova.raw;

var APP_PATH = &#39;./app&#39;,
    CORDOVA_PATH = &#39;./cordova/www&#39;;

gulp.task(&#39;del-cordova&#39;, function(cb) {
    del([ CORDOVA_PATH + &#39;/*&#39; ])
        .then(function() {
            cb();
        });
});

gulp.task(&#39;compile&#39;, [ &#39;del-cordova&#39; ], function(cb) {
    return gulp.src([ APP_PATH + &#39;/**/*&#39; ])
        .pipe(gulp.dest(CORDOVA_PATH));
});

gulp.task(&#39;build&#39;, [ &#39;compile&#39; ], function(cb) {
    process.chdir(__dirname + &#39;/cordova&#39;);
    cordova
        .build()
        .then(function() {
            process.chdir(&#39;../&#39;);
            cb();
        });
});

gulp.task(&#39;emulate&#39;, [ &#39;compile&#39; ], function(cb) {
    process.chdir(__dirname + &#39;/cordova&#39;);
    cordova
        .run({ platforms: [ &#39;ios&#39; ] })
        .then(function() {
            process.chdir(&#39;../&#39;);
            cb();
        });
});
</code></pre>
<p>If you ran anything at the point, you&#39;d replace the default Cordova <code>www</code> directory with that stark emptiness of your nonexistent <code>app</code> directory. Remedy that with the following, which moves the contents of <code>cordova/www</code> to <code>app</code>.</p>
<pre><code class="lang-bash">mv ./cordova/www ./app
</code></pre>
<p>You now have the almost complete example. If you type in <code>gulp compile</code>, <code>cordova/www</code> will be recreated with the contents of <code>app</code>. Nothing else is going on here at the moment, but think of the possibilities.</p>
<p>We haven&#39;t quite finished yet. Type in the following, to add iOS and/or Android as platforms to your new project.</p>
<pre><code class="lang-bash">cd cordova
cordova platform add ios
cd ../
</code></pre>
<p>While you&#39;re in the <code>cordova</code> directory, you could have also run <code>cordova build</code> or <code>cordova emulate ios</code>, but that&#39;s for losers.</p>
<p>Within in the project root, run either of these bad boys:</p>
<pre><code class="lang-bash">gulp build
gulp emulate
</code></pre>
<p>That&#39;s right, one command to rule them all. <code>gulp emulate</code> transpiles the code, moves it to <code>cordova/www</code> then kicks off the Cordova <code>build</code> and <code>emulate</code> commands.</p>
<p>&quot;But how does this sorcery work?&quot; I hear you cry. Cordova developers will mostly recognise Cordova&#39;s <a href="https://www.npmjs.com/">NPM</a> package as a command line tool, but as such a package, we should also be able to require it within a Node script (or in this case, Gulp). The reference here, <code>cordova = require(&#39;cordova-lib&#39;).cordova.raw</code>, provides access to the Cordova&#39;s underlying API, exposing stuff like <code>build</code> and <code>emulate</code>.</p>
<p>It&#39;s not all unicorns mind; the API has auto-detection routine in place that works out the project&#39;s root directory. This only works however, if you&#39;re within Cordova&#39;s project structure. I&#39;m positive this can be overcome by &#39;cleaner&#39; methods of API abstraction, but for the moment I&#39;ve circumvented the issue by introducing two calls to <code>process.chdir</code>. <code>chdir</code> changes the working directory of running script. The second call resets the directory, for the purposes of possible task chaining.</p>
<p>See here:</p>
<pre><code class="lang-js">gulp.task(&#39;emulate&#39;, [ &#39;compile&#39; ], function(cb) {
    process.chdir(__dirname + &#39;/cordova&#39;);
    cordova
        .run({ platforms: [ &#39;ios&#39; ] })
        .then(function() {
            process.chdir(&#39;../&#39;);
            cb();
        });
});
</code></pre>
<ol>
<li>We change the directory.</li>
<li>We call <code>run</code>. <code>emulate</code> is an alias for <code>run</code>.</li>
<li>When the <code>run</code> process completes, the directory is reset.</li>
</ol>
<p>So there you have it, in a single Gulp command you can, transpile, populate, build and emulate. For me, this little nugget has sped up my workflow, and has made the build task more approachable to other developers working on the project.</p>
<p><em><strong>UPDATE 13/04/2015:</strong> Updated example to use latest <code>del</code> syntax.</em></p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/03/23/in-the-name-of-gulp/"/>
    <updated>2015-03-23T22:41:47+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/03/23/in-the-name-of-gulp/</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR:</strong> Use Gulp 4 if you care about task management. If you can&#39;t use Gulp 4, use Gulp 3 with &#39;runSequence&#39;. Also, I need to start reading documentation more and assuming less.</em></p>
<p><em><strong>NOTE:</strong> You see the code over at <a href="https://github.com/kim3er/gulp-4-demo">Github</a>.</em></p>
<p>The release of Gulp 4 is right around the corner, but you can already use it on the <a href="https://github.com/gulpjs/gulp/tree/4.0">4.0 branch</a>. Here is why you should.</p>
<!-- more -->
<h2 id="feelings-of-inadequacy">Feelings of inadequacy</h2>
<p>When <a href="http://gruntjs.com/">Grunt</a> gained popularity, I was excited by the premise, but underwhelmed by the execution. I feel this is more due to a deficiency on my part, rather than an actual problem with Grunt, given the <a href="http://gruntjs.com/development-team">team</a> behind it. Just looking at the <a href="http://gruntjs.com/getting-started">Getting Started</a> page causes static to course through my brain. #brains</p>
<p>This feeling of inadequacy stayed with me until I found <a href="https://github.com/gulpjs/gulp">Gulp</a>. Gulp&#39;s barrier to entry seems a lot lower than Grunt&#39;s, it&#39;s really a tool you can just run with. Now I feel great about myself, now that I&#39;ve found &#39;my people&#39;. Amen brothers and sisters, this is the house of Gulp.</p>
<h2 id="asynchronous-shrubs">Asynchronous shrubs</h2>
<p>It&#39;s not all roses in the garden of Gulp 3 though, well maybe it is, but those roses have thorns. And those thorns all bare the words &#39;async callbacks&#39;. If you&#39;ve ever considered Gulp tasks to be modular, building blocks of larger tasks, then you&#39;ve probably faced the same disappointment that I have, that they&#39;re not.</p>
<p>Take this simple gulpfile:</p>
<pre><code class="lang-js">var gulp = require(&#39;gulp&#39;)
    sass = require(&#39;gulp-sass&#39;),
    babel = require(&#39;gulp-babel&#39;),
    del = require(&#39;del&#39;);

var DEST = &#39;./dest&#39;,
    SRC = &#39;./src&#39;;

gulp.task(&#39;clean&#39;, function(cb) {
    del(DEST, cb);
});

gulp.task(&#39;stylesheets&#39;, function() {
    return gulp.src(SRC + &#39;/app.scss&#39;)
        .pipe(sass())
        .pipe(gulp.dest(DEST));
});

gulp.task(&#39;javascripts&#39;, function() {
    return gulp.src(SRC + &#39;/app.js&#39;)
        .pipe(babel({ blacklist: [ &#39;useStrict&#39; ] }))
        .pipe(gulp.dest(DEST));
});

gulp.task(&#39;html&#39;, function() {
    return gulp.src(SRC + &#39;/app.html&#39;)
        .pipe(gulp.dest(DEST));
});

gulp.task(&#39;default&#39;, [ &#39;clean&#39;, &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39; ], function() {

});
</code></pre>
<p>The script above takes the contents of <code>src</code> and sticks it in <code>dest</code>. There is a problem with the script above, that becomes apparent when you check the output:</p>
<pre><code class="lang-bash">[22:02:10] Starting &#39;clean&#39;...
[22:02:10] Starting &#39;stylesheets&#39;...
[22:02:10] Starting &#39;javascripts&#39;...
[22:02:10] Starting &#39;html&#39;...
[22:02:10] Finished &#39;clean&#39; after 23 ms
[22:02:10] Finished &#39;javascripts&#39; after 48 ms
[22:02:10] Finished &#39;html&#39; after 45 ms
[22:02:10] Finished &#39;stylesheets&#39; after 55 ms
[22:02:10] Starting &#39;default&#39;...
[22:02:10] Finished &#39;default&#39; after 12 μs
</code></pre>
<p>Look at the fifth entry, it&#39;s the <code>clean</code> task finishing after 23 milliseconds, after all the other tasks have already started. So the clean script is still deleting stuff after the other tasks have started moving their stuff across.</p>
<h2 id="something-funny-about-iteration">Something funny about iteration</h2>
<pre><code class="lang-js">gulp.task(&#39;default&#39;, [ &#39;clean&#39; ], function() {
    [ &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39; ].forEach(function(taskName) {
        gulp.start(taskName);
    });
});
</code></pre>
<p>With the <code>default</code> task above, the <code>clean</code> task will complete before any other task starts; no more conflict. Thing is though, looking at the output, the <code>default</code> task is the first to finish after <code>clean</code>. Because Gulp tasks are asynchronous (non blocking), the <code>default</code> task has no reason to hang around waiting for all the tasks in the <code>forEach</code> to complete; the code is only interested in starting each task. This isn&#39;t a big deal in our example, but what if you then needed to add a third step?</p>
<pre><code class="lang-js">gulp.task(&#39;build&#39;, [ &#39;clean&#39; ], function(cb) {
    [ &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39; ].forEach(function(taskName) {
        gulp.start(taskName);
    });
    cb();
});

gulp.task(&#39;deploy&#39;, [ &#39;build&#39; ], function() {
    console.log(&#39;deploy!&#39;);
});

gulp.task(&#39;default&#39;, [ &#39;deploy&#39; ], function() {

});
</code></pre>
<p>Check out the output:</p>
<pre><code class="lang-bash">[22:28:20] Starting &#39;clean&#39;...
[22:28:20] Finished &#39;clean&#39; after 8.59 ms
[22:28:20] Starting &#39;build&#39;...
[22:28:20] Starting &#39;stylesheets&#39;...
[22:28:20] Starting &#39;javascripts&#39;...
[22:28:20] Starting &#39;html&#39;...
[22:28:20] Finished &#39;build&#39; after 10 ms
[22:28:20] Starting &#39;deploy&#39;...
deploy!
[22:28:20] Finished &#39;deploy&#39; after 59 μs
[22:28:20] Starting &#39;default&#39;...
[22:28:20] Finished &#39;default&#39; after 2.89 μs
[22:28:20] Finished &#39;html&#39; after 42 ms
[22:28:20] Finished &#39;javascripts&#39; after 45 ms
[22:28:20] Finished &#39;stylesheets&#39; after 52 ms
</code></pre>
<p>The <code>deploy</code> task finishes before the <code>build</code> tasks have completed, which is obviously not ideal!</p>
<h2 id="my-go-to-for-async-code-given-up-on-the-humor-">My &#39;go to&#39; for async code (given up on the &#39;humor&#39;)</h2>
<p>I had expected to find that the <code>start</code> function would support a callback or even an event emitter. That being the case, we could use something like <a href="https://github.com/caolan/async">async</a> (a neat package for dealing with asynchronous code) to do something like:</p>
<pre><code class="lang-js">    async
        .eachSeries(
            [ &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39; ],
            function(taskName, callback) {
                gulp.start(taskName, function() { callback(); });
                // or
                // gulp.start(taskName).on(&#39;end&#39;, callback);
            },
            function(err) {
                cb()
            }
        );
</code></pre>
<p>But alas, not. The <code>start</code> function is fire and forget. In the example above, crazy stuff happens in the output:</p>
<pre><code class="lang-bash">[20:34:15] Starting &#39;clean&#39;...
[20:34:15] Finished &#39;clean&#39; after 8.25 ms
[20:34:15] Starting &#39;build&#39;...
[20:34:15] Starting &#39;stylesheets&#39;...
[20:34:15] Finished &#39;stylesheets&#39; after 25 ms
</code></pre>
<h2 id="-runsequence-a-beautiful-stopgap">&#39;runSequence&#39;, a beautiful stopgap</h2>
<p>What you need, is an unassuming, wicked little plugin called <a href="https://www.npmjs.com/package/run-sequence">run-sequence</a>. Using &#39;run-sequence&#39;, you can do something like:</p>
<pre><code class="lang-js">gulp.task(&#39;build&#39;, [ &#39;clean&#39; ], function(cb) {
    runSequence(
        [ &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39; ],
        cb
    );
});
</code></pre>
<p>You can see from the output that we get exactly what we want:</p>
<pre><code class="lang-bash">[20:41:34] Starting &#39;clean&#39;...
[20:41:34] Finished &#39;clean&#39; after 8.18 ms
[20:41:34] Starting &#39;build&#39;...
[20:41:34] Starting &#39;stylesheets&#39;...
[20:41:34] Starting &#39;javascripts&#39;...
[20:41:34] Starting &#39;html&#39;...
[20:41:34] Finished &#39;html&#39; after 44 ms
[20:41:34] Finished &#39;stylesheets&#39; after 54 ms
[20:41:34] Finished &#39;javascripts&#39; after 49 ms
[20:41:34] Finished &#39;build&#39; after 56 ms
[20:41:34] Starting &#39;deploy&#39;...
deploy!
[20:41:34] Finished &#39;deploy&#39; after 81 μs
[20:41:34] Starting &#39;default&#39;...
[20:41:34] Finished &#39;default&#39; after 3.88 μs
</code></pre>
<p>&#39;run-sequence&#39; is cool, but there is a better way.</p>
<h2 id="the-point-of-the-post">The point of the post</h2>
<p>Gulp 4 uses <a href="https://github.com/phated/undertaker">undertaker</a> for task management. This is significant because &#39;undertaker&#39; supports the chaining of series and parallel tasks. In order to make use of this functionality, you need to install the prerelease version of Gulp, which is easily done by following this <a href="http://demisx.github.io/gulp4/2015/01/15/install-gulp4.html">guide</a>.</p>
<p>You can see examples of series and parallel functionality, <a href="https://github.com/gulpjs/gulp/blob/4.0/docs/recipes/running-tasks-in-series.md">here</a>, but check this out:</p>
<pre><code class="lang-js">gulp.task(&#39;build&#39;, gulp.series(&#39;clean&#39;, &#39;stylesheets&#39;, &#39;javascripts&#39;, &#39;html&#39;));

gulp.task(&#39;deploy&#39;, gulp.series(&#39;build&#39;, function(cb) {
    console.log(&#39;deploy!&#39;);
    cb();
}));

gulp.task(&#39;default&#39;, gulp.series(&#39;deploy&#39;));
</code></pre>
<p>The difference here is that the dependancies array and callback have been replaced with chain-able <code>series</code> functions. You can see from the output below that, while the <code>deploy</code> task appears to start too early, the <code>console.log</code> demonstrates that the meat and veg of the task runs when it needs to.</p>
<pre><code class="lang-bash">[21:39:29] Starting &#39;default&#39;...
[21:39:29] Starting &#39;deploy&#39;...
[21:39:29] Starting &#39;build&#39;...
[21:39:29] Starting &#39;clean&#39;...
[21:39:29] Finished &#39;clean&#39; after 8.95 ms
[21:39:29] Starting &#39;stylesheets&#39;...
[21:39:29] Finished &#39;stylesheets&#39; after 17 ms
[21:39:29] Starting &#39;javascripts&#39;...
[21:39:29] Finished &#39;javascripts&#39; after 32 ms
[21:39:29] Starting &#39;html&#39;...
[21:39:29] Finished &#39;html&#39; after 2.98 ms
[21:39:29] Finished &#39;build&#39; after 62 ms
[21:39:29] Starting &#39;&lt;anonymous&gt;&#39;...
deploy!
[21:39:29] Finished &#39;&lt;anonymous&gt;&#39; after 222 μs
[21:39:29] Finished &#39;deploy&#39; after 63 ms
[21:39:29] Finished &#39;default&#39; after 65 ms
</code></pre>
<p>To sum up. Gulp 4 is a huge step forward in terms of task management. I&#39;ve had no problems with v4 so far, but if you need to hang with v3 for a little while longer, &#39;run-sequence&#39; is a good option.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/03/05/comics-the-drm-effect/"/>
    <updated>2015-03-05T07:42:41+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/03/05/comics-the-drm-effect/</id>
    <content type="html"><![CDATA[<p>When I transitioned from paper to digital, I didn&#39;t just reclaim floor space in my loft, I picked up a more eclectic taste in reading material as well. For the most part, I suspect happenstance of maturity in tastes and storage reclamation. One factor, that at least in part, can be attributed to my personal comic book renaissance, is DRM. Which is funny, because I bloody hate DRM.</p>
<!-- more -->
<p>DRM exposes the shame that we don&#39;t really own anything. Buy &quot;A New Hope&quot; of VHS, then wait for the format to become obsolete. Buy it DRM through iTunes, has it really got any less of a shelf life. How many times have we bought the original Star Wars trilogy (to own), throughout our lives. I&#39;ve bought it three times, twice on VHS, once on DVD. I will not replace the DVDs, unless the movie industry goes DRM free or Disney release an irresistible boxset. Ah, shit.</p>
<p>At first, I took the approach with comics, that I still take with my digital movie collection, that DRM is a fact of life. If you want to see the movie, it&#39;s either DRM or a hard copy. I don&#39;t want a hard copy. As a side issue, this is why I have not seen Twelve Monkeys in such a long time (not available in the UK to stream, is never on the TV).</p>
<p>With comics, there is a third option that has just become a lot more popular. DRM-free comics. Look, I&#39;m not saying they&#39;re new, just that your options have recently increased, albeit at the sacrifice of other ethical issues. What am I talking about? Comixology, a firm favourite of mine for reading digital comics, made the monumental step of allowing creators to offer their comics DRM-free. This is a truly amazing step forward in my view. So, what about the ethics? Man it&#39;s annoying that they&#39;ve been taken over by (the UK tax dodging poster boys) Amazon.</p>
<p>I hate that I&#39;m so invested in this company.</p>
<ul>
<li>I use Amazon Prime, because they have some great streaming options. DRM protected.</li>
<li>I use Audible. Amazon &amp; DRM protected! But the best source of audio books I&#39;ve found.</li>
<li>I have a Kindle, because it&#39;s easily the best device for reading, which also ties in with Audible. Also DRM protected.</li>
<li>And now, now my comics are purchased through Amazon as well. Arrrgh. The one saving grace being that DRM is optional.</li>
</ul>
<p>Let&#39;s save my ethical crises for another post. It&#39;s unlikely that Marvel or DC are going to be clicking the &quot;DRM-free&quot; button anytime soon. Dark Horse have their own service which is still disappointingly DRM protected. All of which means that if you want a DRM-free comic book library, you have to look at other publishers.</p>
<p>2000 AD have been selling their entire digital catalogue,  DRM-free for a good while now, and they deserve nothing but praise for it. Because of this, I&#39;ve rekindled my love of their periodical, as well as discovering some real classic gems. Halo Jones is the one that comes immediately to mind. If I have one gripe with 2000 AD, it&#39;s its clunky checkout process. No ability to save card details or use Paypal. If the process of buying comics was easier, I&#39;d regrettably be spending more. I know this is true because of in spite of my ethical crises, the Comixology checkout process is smooth like butter. So smooth, it&#39;s a little unsettling at times.</p>
<p>I don&#39;t just read DRM-free comics. I read a few titles, like Powers, Hellboy &amp; Atomic Robo that are so far not free of their DRM shackles. Here though, I end this post with some DRM-free recommendations.</p>
<h2 id="2000-ad">2000 AD</h2>
<ul>
<li><a href="http://shop.2000adonline.com/products/ballad_of_halo_jones">The Ballad of Halo Jones</a> - I love this book so much. It&#39;a true space opera in comic form. Reminiscent of Ender&#39;s Game and Forever War.</li>
<li><a href="http://shop.2000adonline.com/digital/comics">2000 AD</a> - I&#39;m on #1679. So many stories, so much beautiful artwork. I couldn&#39;t hope to remember them all. Shakara!</li>
</ul>
<h2 id="comixology">Comixology</h2>
<ul>
<li><a href="https://www.comixology.co.uk/Bitch-Planet/comics-series/30465">Bitch Planet</a> - I&#39;m three issues in, and it&#39;s really good. The art is so cool, very pulpy. The story has kicked off to a great start.</li>
<li><a href="https://www.comixology.co.uk/Elephantmen/comics-series/654">Elephantmen</a> - I admit, I&#39;ve not read this one in a little while, but I was happy to see it go DRM-free. I&#39;m hovering around #28. It&#39;s a gritty piece of work and I like how the different threads work together.</li>
<li><a href="https://www.comixology.co.uk/Morning-Glories/comics-series/4617">Morning Glories</a> - Not my usual bag, but the story is compelling. I&#39;m on #15.</li>
<li><a href="https://www.comixology.co.uk/Jack-Staff/comics-series/686">Jack Staff</a> - The artwork is awesome. The stories for the most part are great, with a lot of funny references, familiar to those of a British upbringing.</li>
<li><a href="https://www.comixology.co.uk/The-Life-After/comics-series/21882">The Life After</a> - I really love the art in this book. I&#39;m on #3, and so far, it&#39;s very original, very surreal.</li>
</ul>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/02/28/localforage-for-cross-platform-storage/"/>
    <updated>2015-02-28T09:30:05+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/02/28/localforage-for-cross-platform-storage/</id>
    <content type="html"><![CDATA[<p><em>TL;DR: You should be using <a href="https://mozilla.github.io/localForage/">localForage</a> for all your web based local storage needs. It&#39;s wonderful.</em></p>
<p>Storage in general is a bit of a tricky one in hybrid development. There are three main types of storage (excluding bespoke implementations and filesystem) you potentially have access to in a web based development:</p>
<!-- more -->
<h2 id="localstorage">localStorage</h2>
<p>Until recently, my &quot;go to guy&quot; for app storage. localStorage is really easy to use key-value storage, that is at the time of writing, the only consistent cross-platform storage mechanism. The problem with localStorage though, is that you typically only get access to 5MB. This has always been sufficient for my needs in the past, but you can&#39;t help thinking that&#39;s a scalability problem waiting to happen. The limit speaks to the intended use for this sort of storage; if you&#39;ve a lot of data, look somewhere else.</p>
<pre><code class="lang-javascript">localStorage.setItem(&#39;key&#39;, &#39;value&#39;);
</code></pre>
<p><a href="http://caniuse.com/#feat=namevalue-storage">Compatibility</a></p>
<h2 id="websql">WebSQL</h2>
<p>WebSQL is an implementation of Sqlite, which is great, because I love Sqlite. What is not so great is that there is no support for IE/Firefox, and non seemingly on the horizon. I suspect it&#39;s due to the lack of involvement from two major vendors, that <a href="http://en.wikipedia.org/wiki/Web_SQL_Database">W3C ceased working on the specification in November 2010</a>. No more to be said.</p>
<pre><code class="lang-javascript">
var database = openDatabase(&#39;testDB&#39;, &#39;1.0&#39;, &#39;Test Database&#39;, 1024 * 1024);
database.transaction(function (transaction) {
   transaction.executeSql(&#39;CREATE TABLE IF NOT EXISTS entries (id INTEGER PRIMARY KEY, value VARCHAR)&#39;);
   transaction.executeSql(&#39;INSERT INTO entries (value) VALUES (&quot;value&quot;)&#39;);
});
</code></pre>
<p><a href="http://caniuse.com/#feat=sql-storage">Compatibility</a></p>
<h2 id="indexeddb">IndexedDB</h2>
<p>IndexedDB has gained <a href="http://www.girliemac.com/blog/2014/07/03/indexeddb/">greater platform support of late</a>. Even so, with support having only just been implemented in iOS &amp; Android, legacy support is an issue. The Blob support is really interesting. But actually, beyond what I&#39;ve read, I don&#39;t know too much about IndexedDB, I&#39;ve never really used it.</p>
<p><em>NOTE: I went hunting around for an example for IndexedDB, the best article I came across was <a href="http://code.tutsplus.com/tutorials/working-with-indexeddb--net-34673">this one</a>.  Wow, is IndexedDB long winded or what?!</em></p>
<p><a href="http://caniuse.com/#feat=indexeddb">Compatibility</a></p>
<p>So, which storage mechanism am I using? Well, I&#39;m probably using IndexedDB in most cases. Ehh? I recently had call to convert a Cordova app to a Chrome app. The app in question was using localStorage. Trick is, Chrome apps don&#39;t support standard localStorage. They have their own version (called <a href="https://developer.chrome.com/apps/storage">chrome.storage</a>) that is very similar to localStorage, but is asynchronous nature. I didn&#39;t really want to rewrite the whole data layer specifically to work with Chrome app, but I found the idea of making it  asynchronous appealing . Maybe it was time to break my reliance on localStorage.</p>
<p>I found <a href="https://mozilla.github.io/localForage/">localForage</a>, a Mozilla library that wraps localStorage, WebSQL and IndexedDB into asynchronous localStorage API. Perfect! The library basically uses whatever is available; You can even set or of precedence and write your own adapters (I&#39;m thinking <a href="https://developer.chrome.com/apps/storage#property-sync">chrome.storage.sync</a>).</p>
<p>Below is a fragment of the code I&#39;ve converted to use localForage. The JavaScript is written using ES6.</p>
<pre><code class="lang-javascript">class InternalStorage {

    constructor(key) {
        this._storage = localStorage;
    }

    _serialize(data) {
        return JSON.stringify(data);
    }

    _deserialize(value) {
        return JSON.parse(value);
    }

    _getIndexKey() {
        return this._key + &#39;-index&#39;;
    }

    getIndex() {
        var value = this._storage.getItem(this._getIndexKey());

        if (value) {
            return this._deserialize(value);
        }
        else {
            return [];
        }
    }

    setIndex(array=[]) {
        var obj = this._serialize(array);
        return this._storage.setItem(this._getIndexKey(), obj);
    }

}
</code></pre>
<p>Here is the converted code, using localForage:</p>
<pre><code class="lang-javascript">class InternalStorage {

    constructor(key) {
        this._storage = localforage;
    }

    _serialize(data) {
        return data;
    }

    _deserialize(value) {
        return value;
    }

    _getIndexKey() {
        return this._key + &#39;-index&#39;;
    }

    getIndex() {
        var self = this;

        return new Promise(function(resolve, reject) {
            self._storage.getItem(self._getIndexKey())
                .then((value) =&gt; { resolve(self._deserialize(value)); });
        });
    }

    setIndex(array=[]) {
        var obj = this._serialize(array);
        return this._storage.setItem(this._getIndexKey(), obj);
    }

}
</code></pre>
<p>The things to notice with the transition to localForage are:</p>
<ul>
<li>No requirement to serialise/deserialise, as localForage deals with this.</li>
<li>localForage returns an ES6 Promise, so, so does <code>setIndex</code>.</li>
<li>I&#39;ve wrapped the logic for <code>getIndex</code> in a Promise, so I can keep my <code>_serialize</code> method in place. Well, you never know.</li>
</ul>
<p>ES6 is a big thing for me at the moment, so the fact that localForage supports ES6 compliant promises, was very appealing. The ability to write additional adapters adds future proofing. My one gripe, which isn&#39;t an issue with localForage, is that we don&#39;t have a robust solution for relational storage in our web based development at the moment.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/02/19/page-attributes-in-perch/"/>
    <updated>2015-02-19T07:52:05+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/02/19/page-attributes-in-perch/</id>
    <content type="html"><![CDATA[<p>Page Attributes allow you to add editable content at the page level, rather than on a content level. The syntax is almost identical to that of a standard content region. Below is an extract of <code>perch/templates/pages/attributes/seo.html</code>:</p>
<pre><code class="lang-html">&lt;perch:pages id=&quot;description&quot; label=&quot;Description&quot; type=&quot;textarea&quot; size=&quot;xs&quot; escape=&quot;true&quot; count=&quot;chars&quot; /&gt;
</code></pre>
<!--more-->
<p><em>If you&#39;re not already familiar with how to implement Page Attributes, I urge you to check out Perch&#39;s <a href="http://docs.grabaperch.com/docs/pages/page-attributes/">docs</a>. The implementation is simple, and as the builtin example suggests, very effective for SEO.</em></p>
<p>This is a somewhat contrived example, but should hopefully demonstrate the flexibility that page attributes add to Perch. Imagine a website that contains a list of projects. The home page contains a list of the titles of those projects, and a link to view more information. The list is generated using the <a href="http://docs.grabaperch.com/docs/navigation/perch-pages-navigation/">perch_pages_navigation</a> function.</p>
<pre><code class="lang-php">&lt;?php perch_pages_navigation(array( &#39;from-path&#39; =&gt; &#39;*&#39; )); ?&gt;
</code></pre>
<p>We&#39;d like the list to include a thumbnail and a small excerpt of the project description. I&#39;ve already provided a <a href="/blog/2015/01/14/flexible-index-pages-in-perch/">tutorial</a> on a flexible approach for achieving this, but perhaps it&#39;s a bit overkill for the immediate needs of the client. With Page Attributes we can fresh out our index page, with an image and an excerpt, with very little effort.</p>
<p>Adding the following to <code>perch/templates/pages/attributes/default.html</code>:</p>
<pre><code class="lang-html">&lt;perch:pages id=&quot;image&quot; label=&quot;Image&quot; type=&quot;image&quot; /&gt;
&lt;perch:pages id=&quot;excerpt&quot; label=&quot;Excerpt&quot; type=&quot;textarea&quot; /&gt;
</code></pre>
<p>Adds two additional fields in the Page Details section of all pages.</p>
<p><img src="/images/page-attributes-1.png" alt="Page Attributes added"></p>
<p>This new content is saved at a page level, so it can now be exposed in our index page using our existing <code>perch_pages_navigation</code> implementation. By modifying &#39;perch/templates/navigation/item.html&#39; to the following:</p>
<pre><code class="lang-html">&lt;perch:before&gt;
    &lt;ul&gt;
&lt;/perch:before&gt;
        &lt;li&lt;perch:if exists=&quot;current_page&quot;&gt; class=&quot;selected&quot;&lt;/perch:if&gt;&lt;perch:if exists=&quot;ancestor_page&quot;&gt; class=&quot;ancestor&quot;&lt;/perch:if&gt;&gt;
            &lt;a href=&quot;&lt;perch:pages id=&quot;pagePath&quot; /&gt;&quot;&gt;
                &lt;img src=&quot;&lt;perch:pages id=&quot;image&quot; /&gt;&quot; alt=&quot;&lt;perch:pages id=&quot;pageNavText&quot; /&gt;&quot;&gt;
                &lt;h1&gt;
                    &lt;perch:pages id=&quot;pageNavText&quot; /&gt;
                &lt;/h1&gt;
                &lt;p&gt;
                    &lt;perch:pages id=&quot;excerpt&quot; label=&quot;Excerpt&quot; type=&quot;textarea&quot; /&gt;
                &lt;/p&gt;
            &lt;/a&gt;   
            &lt;perch:pages id=&quot;subitems&quot; encode=&quot;false&quot; /&gt;
        &lt;/li&gt;
&lt;perch:after&gt;
    &lt;/ul&gt;
&lt;/perch:after&gt;
</code></pre>
<p>The outputted HTML of our index page would resemble:</p>
<pre><code class="lang-html">&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;/industries/project-1.php&quot;&gt;
            &lt;img src=&quot;/perch/resources/project-thumb.jpg&quot; alt=&quot;Project 1&quot;&gt;
            &lt;h1&gt;
                Project 1
            &lt;/h1&gt;
            &lt;p&gt;
                Project Excerpt
            &lt;/p&gt;
        &lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>You can see how quickly we can expose, and gain access to, page level content with Page Attributes. This technique may well fit the bill for you immediate requirements. Before committing to this course of action though, see my previously mentioned <a href="/blog/2015/01/14/flexible-index-pages-in-perch/">tutorial</a>, you should be aware of the following aspects of Page Attributes:</p>
<ol>
<li>The new fields are hidden away in the Page Details tab. The content we enter for the index page, may have overlap with content being created for the project page. In this case it more sense to group all the content into content regions.</li>
<li>Through the use of &#39;Attribute templates&#39;, the user can select which attributes are configurable at a page level. However, there is no way for a new page to infer which template it should us. Which means that it is down to the user to make this decision each time, which in my opinion, limits the dropdown&#39;s usefulness.</li>
</ol>
<p>So there you are, Page Attributes. A pretty neat way to add a bit more oomph to your index pages.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/02/12/knowing-your-craft-to-the-rescue/"/>
    <updated>2015-02-12T07:21:23+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/02/12/knowing-your-craft-to-the-rescue/</id>
    <content type="html"><![CDATA[<p>Just finished reading <a href="http://alistapart.com/column/what-will-save-us-from-the-dark-side-of-pre-processors">What Will Save Us from the Dark Side of CSS Pre-Processors?</a> on <a href="http://alistapart.com/">A List Apart</a>. I found the title and initial tone of the post confounding. And well, I probably read the post in the first instance, to shout down the wildly unfair negative connotations attached to preprocessors.</p>
<!-- more -->
<p>The thing is, I love preprocessors. I love them so much that I&#39;m currently brewing a series of posts extolling the virtues of preprocessors. Then I&#39;m faced by a post by A List Apart (a site I have a lot of respect for), apparently prophesying the demise of these little wonders. I couldn&#39;t let the post go, what if they were right?</p>
<p>After all, its up to all of us to constantly question everything we believe to be true. Right? Right.</p>
<p>The arguments set forth for the problems with preprocessors are:</p>
<ol>
<li><a href="http://alistapart.com/column/what-will-save-us-from-the-dark-side-of-pre-processors#section2">Unmindful use of preprocessors creates bloated output.</a></li>
<li><a href="http://alistapart.com/column/what-will-save-us-from-the-dark-side-of-pre-processors#section3">By adding a layer of abstraction on the base syntax, you&#39;re essentially locking yourself into it&#39;s Domain-Specific Language (DSL).</a></li>
</ol>
<p>Blaming the use of a preprocessor on the coder&#39;s own bad habits, is like blaming traffic cameras for speeding. To get the best out of a tool, you must use it correctly. I&#39;m no shining example of this! I frequently try to nail pictures to the wall with a screwdriver; I&#39;m forever using an unnecessary amount of nesting in my <a href="http://thesassway.com/intermediate/avoid-nested-selectors-for-more-modular-css">Sass</a>.</p>
<p>You can&#39;t deny &#39;lock-in&#39; effort of adding a preprocessor to a project. In much the same way, you could argue that choosing to write an application in a language like <a href="http://en.wikipedia.org/wiki/Ruby_(programming_language">Ruby</a>), locks the future development to the that language over say the base languages that Ruby is built on, like C or Java.</p>
<p>Well, that&#39;s not quite right, you could write a native extension for Ruby in C, if you wanted. Actually, this is why I use the SCSS syntax of Sass over SASS, and why I favour <a href="https://6to5.org/">6to5</a> over <a href="http://coffeescript.org/">CoffeeScript</a>. In both examples you can make use of all the wonderful syntactic sugar that the preprocessors provide, or ignore all of it and write in the base syntax. Let us not forget that we&#39;re never ever actually locked in by a good preprocessor, as its sole purpose is to generate the base syntax, so you can opt out at any time. &quot;Hey man, I don&#39;t need your syntactic goodness anymore, I&#39;m going to carry on with the base file&quot;.</p>
<p>A couple of issues are raised by my last paragraph:</p>
<ol>
<li><p><strong>I love Ruby for the same reason that I don&#39;t like CoffeeScript.</strong> This is a weirdness that actually Lyza (the original post&#39;s author) will be helping me with later in this post. I have no interest in writing a line of C. I adore JavaScript and have never warmed to CoffeeScript as an alternative.</p>
</li>
<li><p><strong>Why would you ever just  use the base syntax, if you&#39;d gone to the trouble of adding a preprocessor in the first place?</strong> I&#39;m completely non-dismissive of Lyza&#39;s arguments about the &#39;lock-in&#39; effect, or as I&#39;ve always thought of &#39;barrier to entry&#39; or &#39;learning curve&#39;. I work in a very talented dev team. We each come from different technological backgrounds and have our own preferences for tooling &amp; technology. If I&#39;m going to add a dependancy to the project, it better not be at the expense of a co-worker&#39;s ability to jump in.</p>
</li>
</ol>
<p>Its at the point where Lyza starts talking about post-processors, that my angst starts to wain. I&#39;d never heard of <a href="https://github.com/postcss/postcss">PostCSS</a> or <a href="http://www.myth.io/">Myth</a> and I&#39;m pretty excited about both. I use <a href="http://compass-style.org/">Compass</a> a lot; the moment that hooked me was realising that I didn&#39;t  have to hack around with nonsense bits of CSS, to add cross browser support for <code>inline-block</code>. Maybe though its time for a slightly different approach, in much the same way that I write ES6 compliant JavaScript and have a &quot;preprocessor&quot; called 6to5 convert it into something most browsers can work with (I realise I&#39;m talking about ES5). Perhaps I should be writing compliant CSS3 and have one of these &quot;post-processors&quot; add all the &quot;make it work in older browser&quot; stuff.</p>
<p>_Note: I&#39;ve used some of those double quotes divisively, I wonder if you noticed. It seems to me that the use of &quot;pre&quot; and &quot;post&quot; refers to the point at which the code is compliant to a standard. So, 6to5 is actually a post-processor. I went to the site for clarification. 6to5 actually refers to itself as a <a href="http://en.wikipedia.org/wiki/Source-to-source_compiler">transpiler</a>, which is a marvellous way of avoiding a distinction that I care very little about._</p>
<p>In summation, Lyza&#39;s point (I believe) is that transpilers aren&#39;t there to cover up poor code, that diversity in one&#39;s approach (especially within a team) is good. If I&#39;m right, then I agree with her wholeheartedly in both regards. I don&#39;t agree with the negative connotations of so-called preprocessors &amp; post-proprocessors to get to these points though.</p>
<p>For my own part, Lyza&#39;s post is identified the different tacks I have been taking in my usage of transpilers in JavaScript and CSS. Its time to harmonise, where possible, starting with standards code and have the transpiler make it dirty. I won&#39;t be giving up my nesting anytime soon though.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/02/05/the-problem-with-web-comics/"/>
    <updated>2015-02-05T21:26:56+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/02/05/the-problem-with-web-comics/</id>
    <content type="html"><![CDATA[<p>That&#39;s right, I&#39;m going to have quick whinge about web comics. You know, comics of (more often than not) an incredibly high quality, provided for free by their talented creators. It seems like an entirely justifiable premise doesn&#39;t it? Well, maybe... Let&#39;s give it a go and see where we end up.</p>
<!-- more -->
<p>You pick up a book, you read a chapter or two, stick a bookmark in, then set it down on you bedside table. The next time you pick that book up, you go straight to the bookmark and continue reading. I haven&#39;t done that for a while mind. I&#39;m a hoarder by nature, without the space to truly exercise the talent. So I made the decision a few years ago to go digital with all of my printed media, books, magazines and comics. It makes my inability to throw anything away, less of an issue.</p>
<p>The kindle makes reading a book very easy as a digital medium. I was more sceptical about whether I&#39;d get on with comics on a bright iPad screen, but the transition took and I&#39;m almost exclusively digital now. Don&#39;t get me wrong, paper is best - there is nothing like the smell of an old book - but digital is a good compromise. The only real issue I have with digital (as format) is that I am always scrabbling for something to read in the bath.</p>
<p>Okay, I&#39;m slowly getting off the point. The point I am trying to make is that, it took my a little while to buy into comics in a digital format, but once I was there, my appetite became insatiable. &quot;Need more input.&quot;</p>
<p>My taste in comics has changed quite a lot over the years. At the peak of my print comic reading, it was almost exclusively DC/Marvel cape books. Now, I read almost (there&#39;s that word again) no superhero books; my tastes are more fringe. I&#39;m looking for stories that surprise me in some way.</p>
<p>Enter web comics. Thank goodness, I thought we&#39;d never get there.</p>
<p>Not a totally altruistic endeavour on the part of the creator; web comics are a great way to demonstrate a new talent or get different ideas out there. Regardless of motive, &#39;free to read&#39; material is a win for the reader. It has led me personally to discover creators that I may not have found otherwise, and to purchases of those creator&#39;s commercial offerings. A memorable example of this happening, was after finding <a href="http://www.friendswithboys.com/">Friends With Boys</a> by <a href="http://www.faitherinhicks.com/">Faith Erin Hicks</a>, which led me to discovering books like The War at Ellsmere and Adventures of Superhero Girl.</p>
<p>With Friends With Boys, I started reading roughly halfway through the run. Having so much content already available got me hooked. I obsessively finished the rest of the story, ensuring to log on to the site for new content, the moment it was published. In this instance web comics really worked for me.</p>
<p>In other instances, web comics have also worked for me in the short strip format, like with <a href="http://oglaf.com/">Oglaf</a> (NSFW). Oglaf works, because a) the name is very easy to remember and b) the stories are very short and funny (and rude).</p>
<p>I&#39;m discussing virtues, when I should be discussing problems.</p>
<p>##Discoverability
Really the only reliable way I&#39;ve had to find new web comics is by recommendation through <a href="http://io9.com/">io9</a>. I&#39;ve attempted to find other sources, but all too often the sites are outdated in style and content.</p>
<p>##Bookmarks
If I&#39;m reading a purchased comic, I&#39;ll use <a href="https://www.comixology.co.uk/">Comixology</a> or <a href="http://www.bitolithic.com/comic-zeal/">Comic Zeal</a>. These apps are my &quot;easy reach&quot;, they&#39;re my bookmark.</p>
<p>Some web comics are published in blogs, some in more purpose built sites. Some web comics are published as little more than Javascript slideshows with no thought to browser history. Some sites read backwards (chronologically), some forwards.</p>
<p>Man, it&#39;s a mess if you just want to pick something up every now and then. It&#39;s enough to switch me off to most of them.</p>
<p>##Possible Solution
The problem with web comics, I&#39;ve discovered while writing this post, is me (the reader). I expect too much I think, from something that is a) free and b) created by someone(s) who don&#39;t want spend their lives worrying over usability. I suspect they mainly want to write comics.</p>
<p>The solution, I&#39;ve often wondered, might be to have an episodic web comic publishing framework. A service that allowed content creators to upload at whatever frequency they liked, which would then be collected into an entity that could be navigated and bookmarked by the reader, through an app or a website.</p>
<p>The thing that has stopped me from creating such a service in the past (time aside), is the creator&#39;s original motive in uploading the comic in the first place.</p>
<ul>
<li>Would a delivery system such as the one I&#39;ve described, go against principles of the creator?</li>
<li>Does it remove the human element that encompasses a web comic?</li>
<li>Once the content is packaged in such a way, has it jumped ahead of its intended published form?</li>
<li>Are all those bloody adverts actually critical to the creator&#39;s original decision to publish in the first place?</li>
</ul>
<p>I don&#39;t know, maybe I&#39;ll have stab at that system in the future. If you&#39;ve made it to bottom of this post, I&#39;d be interested to hear how you manage your web comic reading. If you&#39;re a creator, I&#39;d be really interested in hearing about the thought process that goes into publishing a web comic, and whether you see a need for a better delivery system.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/31/helpers-as-partial-controllers/"/>
    <updated>2015-01-31T18:08:46+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/31/helpers-as-partial-controllers/</id>
    <content type="html"><![CDATA[<p>This is the first of what I expect will be a series of posts, about revelations that are entirely obvious in hindsight, but whose simplicity had eluded me for so long.</p>
<p>I came to Rails from ASP.NET MVC (have I told you about my <a href="http://www.amazon.co.uk/ASP-Net-MVC-Cookbook-Andrew-Siemer/dp/1849690308">book</a>), as part of a three pronged transition:</p>
<ol>
<li>Microsoft stack &gt; Open source stack</li>
<li>IDE (VS2010) &gt; Smart text editor (TextMate at the time, now Sublime Text 3)</li>
<li>Windows PC &gt; Mac</li>
</ol>
<!--more-->
<p>The one thing I remember missing most when transitioning from ASP.NET MVC to Rails, was not being able to <a href="http://haacked.com/archive/2009/11/18/aspnetmvc2-render-action.aspx/">render actions</a> within a view. I&#39;m not going to regurgitate Phil Haack&#39;s example here (by the way, when did he start working at Github? He was part of my MS dream team). Basically, what we&#39;re talking about is rendering a partial that is attached to a controller. This way the logic is as portable as the partial itself, without putting logic into the actual partial; something I used a lot in ASP.NET MVC.</p>
<p>##Where there&#39;s a will there&#39;s a gem</p>
<p>When I&#39;d convinced myself there wasn&#39;t a direct replacement for this functionality, I went about searching for a gem. What I found, was <a href="https://github.com/apotonick/cells">Cells</a>. This is about four years ago now, so I&#39;m happy to see the gem is still so active. It is pretty much a direct replacement for the functionality I was looking for and I did use it for a few projects. Thing is though, it wasn&#39;t really clicking with the other Rails devs I was working with.</p>
<p>I think maybe it was an &quot;against the grain&quot;, purest, &quot;this isn&#39;t the Rails way&quot; sort of reaction. But maybe they just saw what I couldn&#39;t; that there is a very easy way to accomplish my specific requirement. Either way, after the initial surge of wanting to use every gem under the sum, you gradually begin wanting to slim down your dependancies, and well, Cells didn&#39;t make the cut.</p>
<p>##So, to the point. Helpers</p>
<p>Oh my god, it&#39;s so obvious now. For years I was ruefully sticking logic directly into my partial views, thinking &quot;Well, if I can&#39;t render actions, what else can I do?&quot;. What a doofus.</p>
<p>On a recent project, I was tired of the <code>locals</code> syntax of a partial I was using quite a lot.</p>
<pre><code class="lang-ruby">render( partial: &quot;path/to/partial&quot;, locals: { param_one: &quot;something&quot; } )
</code></pre>
<p>Really tiresome, I know. Anyway, as the partial was being used more, the logic being stuck into said partial was also increasing exponentially.</p>
<p>``` erb partial.html.erb
&lt;%
param_three = false unless defined?( param_three )</p>
<p>if param_two == &quot;Something&quot;
    param_one = &quot;Something incredibly hideous&quot;
end
%&gt;</p>
<p>&lt;p class=&quot;&lt;%= &quot;yuck&quot; if param_three == true %&gt;&gt;
    &lt;%= &quot;#{param_two} - #{param_one}&quot; %&gt;
</p></p>
<pre><code>
In spite of the disgrace my partial had become, what really irked me was having to type in `locals` every time I rendered the partial. &quot;I know, I&#39;ll put it into a helper method&quot;, I thought.

``` ruby something_helpers.rb
module SomethingHelpers

    def render_something(param_one, param_two, param_three = false)
        render( partial: &quot;path/to/partial&quot;, locals: { param_one: param_one, param_two: param_two, param_three: param_three })
    end

end
</code></pre><p>And then the revelation, &quot;Hang on a minute, I can put my logic in here as well&quot;. Hello.</p>
<p>``` ruby something_helpers.rb
module SomethingHelpers</p>
<pre><code>def render_something(param_one, param_two, param_three = false)
    if param_two == &quot;Something&quot;
        param_one = &quot;Something incredibly hideous&quot;
    end

    text = &quot;#{param_two} - #{param_one}&quot;

    render( partial: &quot;path/to/partial&quot;, locals: { text: text, param_three: param_three })
end
</code></pre><p>end</p>
<pre><code>
``` erb partial.html.erb
&lt;p class=&quot;&lt;%= &quot;yuck&quot; if param_three == true %&gt;&gt;
    &lt;%= text %&gt;
&lt;/p&gt;
</code></pre><p>Seriously, sometimes I worry about me. I think I probably have this revelation every six months or so, then forget it. Hopefully after writing this, I won&#39;t forget again.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/31/casual-gaming/"/>
    <updated>2015-01-31T10:26:17+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/31/casual-gaming/</id>
    <content type="html"><![CDATA[<p>To say I am a casual gamer is probably overstating my position, but I do like a bit of inflight entertainment during a &quot;comfort break&quot;. This is a list of games I enjoy playing on the iPhone.</p>
<!--more-->
<p>{% img centre /images/games/shades.png 175 175 Shades iOS Game Icon %}</p>
<p>##<a href="https://itunes.apple.com/gb/app/shades-a-simple-puzzle-game/id888683802?mt=8">Shades</a>
This is a new find for me and I love it. On first appearances, it&#39;s a Tetris clone. Actually though, that is not a fair assessment. The game&#39;s clever use of shades of colour and how they merge together, makes for an addictive game, that is harder than it looks! I think I&#39;ve managed to get to level 9 so far.</p>
<p>{% img centre /images/games/monument.jpg 175 233 Monument Valley iOS Game Screenshot %}</p>
<p>##<a href="http://appstore.com/monumentvalley">Monument Valley</a>
Probably the best puzzle game I&#39;ve ever played, certainly the most beautiful (of any genre). The game plays on the complexity of Escher style architecture. I completed the game and the two expansions without too much difficulty, that shouldn&#39;t put you off though. It&#39;s a game that can replayed over and over and the experience is absorbing.</p>
<p><iframe src="//player.vimeo.com/video/5892502" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>
<p>##<a href="itms://itunes.com/apps/osmos">Osmos</a>
It&#39;s the longest standing (memorable) iOS game I have, actually on my iPad, but it is also available for iPhone. Also the first game that I installed that actively encourages the use of headphones to enhance the experience. I love Osmos; it&#39;s an incredibly relaxing game to play. The difficulty of levels varies greatly. I&#39;ve not managed to complete the game so far, but I play it more out relaxation than out of a need to push through to the upper levels.</p>
<p>{% img centre /images/games/badland.jpg 248 175 Badland iOS Game Screenshot %}</p>
<p>##<a href="https://itunes.apple.com/us/app/badland/id535176909?mt=8&amp;uo=4">Badland</a>
It seems to me that when everyone was getting excited about Flappy Bird, what they should have been playing is Badland. The idea of keeping the main character up by tapping isn&#39;t a new one. I remember playing games of a similar vein on the Commodore 64 (struggling to remember the name though). Badland is this sort of game, but the obstacles can be tricky and timing is key. The graphics and soundtrack really work for me in playfully steampunk-y sort of way.</p>
<p>{% img centre /images/games/crossy-road.png 175 310 Crossy Road iOS Game Screenshot %}</p>
<p>##<a href="https://itunes.apple.com/app/crossy-road-endless-arcade/id924373886?at=1l3vs3u&amp;ct=crcom">Crossy Road</a>
My kids introduced me to this one. Cue yet another eye-roll of something that the kids thought they had found, that our generation owned. &quot;It&#39;s <a href="http://en.wikipedia.org/wiki/Frogger">Frogger</a>!&quot; I exclaimed. &quot;I played this when I was your age&quot;, with a smug curl to my lip. I received blank expressions to this reaction, as I usually do when I attempt some sort of generational dominance. The point of Crossy Road, is that it is completely gorgeous to look at. I loved Frogger, now I get to play it on my iPhone with sensational graphics.</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/2N1TJP1cxmo" frameborder="0" allowfullscreen></iframe></p>
<p>##<a href="http://www.mirrorsedge.com/">Mirror&#39;s Edge</a>
I can&#39;t believe that this game is no longer available on the App Store! What the eff! This game has single handedly taken more hours of my life than any other game. The multiplayer modes are brilliant, I love playing against my kids on them. The purpose of the game is to get from A to B using the Parkour style. I can only hope that a new one is not far off.</p>
<p>##Honourable Mentions
Oh man, I really want to get this post wrapped up, but I can&#39;t without mentioning two (well, three) more games.</p>
<p>###N.O.V.A 2&amp;3
I don&#39;t own a console capable of playing Halo. I&#39;m not a big console sort of person, but I do love Halo. N.O.V.A 2 was the closest I could find to the experience on an iPhone. It&#39;s a great game that my kids and I regularly team up on. Well, we used too, until N.O.V.A 3 came out. #3 was initially quite frustrating, because the multiplayer maps are just so vast, we&#39;d spend the whole game just trying to find each other. We&#39;re better now and the game can be a great afternoon of destruction.</p>
<p>###Modern Combat 5
A sort of progression on from N.O.V.A. I hope N.O.V.A isn&#39;t dropped because of the popularity of games like Modern Combat, but even so, MC5 is aces. I&#39;ve completed the solo missions. I&#39;m an absolute disaster at the multiplayer missions though.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/22/shutting-the-world-out/"/>
    <updated>2015-01-22T20:18:34+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/22/shutting-the-world-out/</id>
    <content type="html"><![CDATA[<p>There is never enough time. Last year in particular, it always felt like there wasn&#39;t enough time in the day.  Running a company, where your work is also the primary source of income, is no easy task. I was always looking for ways of squeezing more hours out of day; tweaking processes, finding better tools, writing scripts. It&#39;s become a bit of an obsession for me, finding &quot;better&quot; ways to get more stuff done. I was pretty good at it, I think I still am. But as the end of last year drew in, it became clear that I was spreading myself too thin.</p>
<!--more-->
<p>I was a manager, a sales person, a support desk, a developer, and was switching these hats constantly throughout the day. My goal on any given day, was to get to the end of the day without any major mishaps. If I managed to progress at all, in terms of significant progression of a project or a more efficient way of doing something, well that was amazing.</p>
<p>The problem was concentration, I couldn&#39;t stay focused on a single task, without being distracted by someone or something craving my attention. We experimented with a few different ways of tackling this:</p>
<ol>
<li>Switching off access to email at specific parts of the day.</li>
<li>We decided that I should not answer the phone.</li>
<li>Further than this, I wouldn&#39;t participate in a phone call unless it was me that initiated it. If someone wanted to talk to me, a time would be arranged for me to ring them back.</li>
<li>Allocated time to perform specific tasks.</li>
</ol>
<p>These feel obvious to me now, but they weren&#39;t back then and had a huge impact on my ability to get through work. Even combined though, these were not the silver bullets I was after. I&#39;m too nosey for one thing, if someone else picked up the phone, my ears would prick up, brain on overdrive wondering what they wanted and were the requirements being dealt with correctly. And who can blame me, it&#39;s my company after all.</p>
<p>I needed a way of maintaining concentration, without completely removing myself from the office. My salvation came in another, now startlingly obvious, epiphany; headphones. It&#39;d never really occurred to me in the past to try headphones, because in the past I&#39;ve typically opted for in-ear earphones, which are uncomfortable over long periods of time. I&#39;m also pretty negative on headphones in an office environment as rule, because I hate sound leakage. But I didn&#39;t see that I had an option and it&#39;s made the world of difference. <a href="http://rich.k3r.me/blog/2015/01/20/finding-a-pair-of-headphones/">My earphones</a> use noise reduction to completely immerse me in the task at hand.</p>
<p>An unexpected and corny side effect of the headphones has been trust. I am nosey because I believe I need to be involved in every decision, that my opinion always needs to be considered. Switching on the headphones has demonstrated to me that  I&#39;m not (always) the centre of the universe, and that many facets of the company can run without my constant interference.</p>
<p>I&#39;m okay with that, because I spend a lot more time on the stuff I like doing now.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/22/railsinstaller-ruby-2-dot-1-on-windows-8-dot-1/"/>
    <updated>2015-01-22T19:53:44+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/22/railsinstaller-ruby-2-dot-1-on-windows-8-dot-1/</id>
    <content type="html"><![CDATA[<p>I&#39;ve recently had to get Rails and Capistrano up and running on a Windows 8.1 machine. These are the problems I encountered and how I fixed them. All issues were encountered after trying to run an existing Rails 4 project.</p>
<!--more-->
<p>My first step was to install Rails using <a href="http://railsinstaller.org">RailsInstaller</a>. This is a great first step for Windows users, as you also get Ruby, Git and DevKit (which is important for building gems that contain native code). I elected to install the Ruby 2.1 version, which at the time of install, was sporting Ruby 2.1.5.</p>
<p>##Invalid Certificate
When running <code>bundle</code>, I encountered the following error:</p>
<pre><code class="lang-bat">Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3
</code></pre>
<p>As per the accepted answer on this <a href="http://stackoverflow.com/questions/27435841/windows-7-64-bit-could-not-find-a-valid-gem-compass-0-here-is-why-unab">StackOverflow question</a>, I downloaded <a href="http://curl.haxx.se/ca/cacert.pem">cacert.pem</a> and placed it here, C:\RailsInstaller. You also need to tell <code>gem</code> where to find the certificate, which is done by setting a environment variable called <code>SSL_CERT_FILE</code>. This can be done on a temporary basis by typing the following into Command Prompt&quot;:</p>
<pre><code class="lang-bat">set SSL_CERT_FILE=C:\RailsInstaller\cacert.pem
</code></pre>
<p>##Sqlite Native
Running any command related to the local Sqlite db, threw up:</p>
<pre><code class="lang-bat">cannot load such file -- sqlite3/sqlite3_native
</code></pre>
<p>According to this <a href="http://stackoverflow.com/questions/26636471/windows-ruby-rails-install-cannot-load-such-file-sqlite3-sqlite3-native">accepted answer</a>, the problem is caused by the version of the <code>sqlite3</code> gem not supporting Ruby 2.1.3+ on Windows. The gem needed to be updated to at least 1.3.10.</p>
<p>##Bcrypt
I encountered a similar problem with the <code>bcrypt</code> gem. I didn&#39;t record the nature of the problem, but updating to at least 3.1.7 resolved the issue.</p>
<p>##TZInfo
When starting up the Rails server, I received an error relating to <code>TZInfo::DataSourceNotFound</code>. According to the accepted answer on this <a href="http://stackoverflow.com/questions/23022258/tzinfodatasourcenotfound-error-starting-rails-v4-1-0-server-on-windows">question</a>, Windows needs an additional gem for the <code>tzinfo</code> gem to work correctly. Add this to your <code>Gemfile</code>:</p>
<pre><code class="lang-ruby">gem &#39;tzinfo-data&#39;, platforms: [:mingw, :mswin, :x64_mingw]
</code></pre>
<p>##NPM Error
For bonus points, I always install Node along with my Rails installations, if only for JavaScript compilation in Sprockets. Node is best installed using the binary from the official <a href="http://nodejs.org/">website</a>.</p>
<p>Typing <code>npm</code> into Command Prompt for the first time, returned the following:</p>
<pre><code class="lang-bat">Error: ENOENT, stat &#39;C:\Users\[Username Here]\AppData\Roaming\npm
</code></pre>
<p>This issue was resolved by creating the missing <code>npm</code> folder in <code>Roaming</code>. Credit goes to the accepted answer of this <a href="http://stackoverflow.com/questions/25093276/node-js-windows-error-enoent-stat-c-users-rt-appdata-roaming-npm">question</a>.</p>
<p>##Capistrano
On the first day of setup, Capistrano worked like a dream. The following day, after a system restart, no dice. Capistrano tasks kept dying with the following:</p>
<pre><code class="lang-bat">Error reading response length from authentication socket
</code></pre>
<p>I tried reinstalling certificates and ensured the SSH Agent was running, to no avail. I still don&#39;t completely understand the problem, but I think the solution has more to do with the PC&#39;s specific environment.</p>
<p><a href="http://www.sourcetreeapp.com/">SourceTree</a> was already installed (and running) on the PC, when I came to install Rails. As part of the installation, SourceTree installs <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Pageant</a>, a Windows based SSH authentication tool.</p>
<p>Basically, Capistrano started working again the moment I had the presence of mind to start Pageant again.</p>
<p><em>NOTE: The PC has two sets of SSH keys setup, one through Pageant, the other through <a href="https://msysgit.github.io/">Msysgit</a>. I thought I&#39;d been using the Msysgit key, but I suspect I was using the Pageant one all along. For Capistrano at least, Git works from the command line, regardless of the status of Pageant.</em></p>
<p>I&#39;m not aware of any dependancy on Pageant by RailsInstaller. So I wonder whether I wouldn&#39;t have this dependancy now, if I didn&#39;t already have Pageant on the system. Or possibly, I&#39;d have struggled getting Capistrano working at all, not appreciating the need for Pageant.</p>
<p>##Line Endings
I&#39;m still not 100% clear what happened here. We manage a number of GIT repos on Windows &amp; Mac, and have not had this issue before. Upon committing changes to a project, from the Windows machine, all the line endings were converted to CRLF. This caused problems with Rake. My inital attempts to fix the issue on a Mac resulted in me corrupting the Sqlite3 development database, so for the remainder of this fix, assume I&#39;ve temporarily moved the db (along with all other binary files, i.e. images) out of the directory structure.</p>
<p>From the project root, on a Mac, I ran the following:</p>
<pre><code class="lang-bash">find . -type f -not -path &quot;./.git/*&quot; -exec perl -pi -e &#39;s/\r\n|\n|\r/\n/g&#39; {} \;
</code></pre>
<p>From Linux, you can run:</p>
<pre><code class="lang-bash">find . -type f -not -path &quot;./.git/*&quot; -exec dos2unix {} \;
</code></pre>
<p>The above, replaces CRLF with LF for all files in the GIT repo.</p>
<p>After readding the database, I ran <code>rails server</code> to check for obvious issues; all seemed well. As per this <a href="https://help.github.com/articles/dealing-with-line-endings/#platform-windows">Github article</a>, I ran the following on the Windows machine:</p>
<pre><code class="lang-bat">git config --global core.autocrlf true
</code></pre>
<p>The above, gets GIT to manage line endings on Windows machines, to keep them in sync with GIT&#39;s base line ending (LF).</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/20/finding-a-pair-of-headphones/"/>
    <updated>2015-01-20T22:38:34+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/20/finding-a-pair-of-headphones/</id>
    <content type="html"><![CDATA[<p>When looking for a pair of headphones, it was important to me that they shut out as much outside noise as possible and be comfortable for long periods of time. I&#39;ve never spent more than £15 on a pair of earphones (typically in ear), so when you type in those requirements into a search engine, you should expect quite a shock!</p>
<!--more-->
<p>I&#39;d read on a couple of developer blogs, that &quot;around ear&quot; design was the way to go for comfort. Also, that <a href="http://www.audio-technica.com/cms/headphones/99aff89488ddd6b1/">Audio Technica ATH-M50X</a>s were a good choice for the money, at around £100. I&#39;m a long time fan of Sennheiser, and came across the <a href="http://en-uk.sennheiser.com/over-ear-headphone-momentum-stereo">Momentum</a> range under my own steam. The &quot;around ear&quot; Momentum&#39;s are around £200 and are far and away the most gorgeous looking headphones I&#39;ve ever seen.</p>
<p>Feeling out of my depth though, I asked around a couple of friends. The response was unanimous. If you want to block out sound, it has to be the Bose Quiet Comfort range. The <a href="https://www.bose.co.uk/GB/en/home-and-personal-audio/headphones-and-headsets/acoustic-noise-cancelling-headphones/quietcomfort-25-headphones/">QC25</a> model is the latest and cost £270! Holy floor Batman, that was not going to be an off-the-cuff decision!</p>
<p>What makes a pair of headphones cost almost £300? The QC25 has acoustic noise cancellation, which I think is basically a series of microphones that detect outside noise, which the headphone then counteracts with a reverse wave, cancelling out the sound. It sounds cool, but I was also concerned the cancelation might work against me, I&#39;m quiet sensitive to electrical noise.</p>
<p>Working on the assumption that Bose aren&#39;t the only company capable of such feats, I also found the <a href="http://en-uk.sennheiser.com/wireless-bluetooth-headset-stereo-mm-550-x-travel">Sennheiser MM 550-X</a>, which purport to do the same as the QC25s, but with bluetooth and surround sound for the same price! At this point the prices were more like monopoly money in my head.</p>
<p>I&#39;d seen these headphones online, but no way was I going to spend dollar until I&#39;d tried them on! I set out to two city centres and a shopping centre, where I found two Bose shops and a third shop that only had Bose headphones for you to try. Not a snifter of the other headphones!</p>
<p>The QC25s were incredible! The sound was beautiful and crisp. In the busy shopping centre, I switched the noise reduction on and the world slipped away. Wow. The &quot;anti sound&quot; wasn&#39;t noticeable to me in the shopping centre.</p>
<p>I wanted to make sure I was making the right choice though, so I hit the internet reviews. I needed noise reduction now, I wasn&#39;t going to spend a £100 on a pair of earphones that didn&#39;t disconnect me from the world. So the question was, how good are the MM 550-Xs? Even the most glowing review of these headphones, that cited them as the best bluetooth headphones on the market, suggested that surround sound was best turned off and the noise reduction was not on par with the QC25. I was really attracted to the bluetooth, but noise reduction was becoming very important to me.</p>
<p>Fast forward a lot &quot;first world&quot; agonising and several attempts to find a shop that would allow me to try a decent selection of headphones. I conceded though and bought the QC25s.</p>
<p>In the silence of my home, I was initially stuck by two disappointments:</p>
<ol>
<li>The &quot;anti noise&quot; is audible if you&#39;re in a quiet environment. To me at least.</li>
<li>The headphones leak more noise to the outside than I&#39;d like at moderate volumes.</li>
</ol>
<p>Then I told myself to get a grip. Why would you use the noise reduction in a quiet environment any way. The headphones do leak more noise than I&#39;d like, but I am exceptionally picky in this area.</p>
<p>I&#39;ve been using them for about two weeks now and I&#39;m entirely satisfied. At work I am blissful ignorance to the world around me. At home, Gravity Rush on the PS Vita is a completely new experience with these bad boys on.</p>
<p>I cannot overstate how comfy they are to wear and the case is invaluable as I am always lugging stuff around in my man bag.</p>
<p>I still have reservations over spending that amount of money on a pair of headphones, but the headphones themselves, I&#39;m doubtless are worth every penny.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/14/flexible-index-pages-in-perch/"/>
    <updated>2015-01-14T23:14:12+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/14/flexible-index-pages-in-perch/</id>
    <content type="html"><![CDATA[<p>It&#39;s pretty easy to knock up an index page in Perch. By &#39;index page&#39;, I mean a page that summarises the content of a sub folder. For instance, you have a collection of projects, implemented as sub pages of a directory called &#39;projects&#39;. You could provide a link to each of these projects on an index page.</p>
<!--more-->
<p>The typical structure would be:</p>
<pre><code>root
    projects
        index.php
        project-1.php
        project-2.php
</code></pre><p>The index itself would be provided by the <code>perch_pages_navigation</code> function. A basic example below:</p>
<pre><code class="lang-php">&lt;?php perch_pages_navigation(array( &#39;from-path&#39; =&gt; &#39;*&#39; )); ?&gt;
</code></pre>
<p>_The asterisk assigned to <code>from-path</code> tells <code>perch_pages_navigation</code> to work from the current directory (&#39;projects&#39;)._</p>
<p>_More information on <code>perch_pages_navigation</code> can be found here, <a href="http://docs.grabaperch.com/docs/navigation/perch-pages-navigation/">perch_pages_navigation</a>._</p>
<p>Would output:</p>
<pre><code class="lang-html">&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;/projects/project-1.php&quot;&gt;Project 1&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;/projects/project-2.php&quot;&gt;Project 2&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>The <code>perch_pages_navigation</code> function uses the HTML template &#39;perch/templates/navigation/item.html&#39; to generate the HTML above. This is a file that can be modified, or even replaced using the <code>template</code> option.</p>
<p>You&#39;re restricted in the content that can be displayed in this template. This is because of how data in Perch is grouped. Within a <code>perch_pages_navigation</code> template, you have access to data related to the page, like the title and path. But you don&#39;t have access to content regions, defined using <code>perch_content</code>, as this not information that is shared across all pages.</p>
<pre><code>Page Content
    - pagePath &lt;-- Can access this
    Region Content (as defined in a perch_content region)
        - some_content &lt;-- Can&#39;t access this
</code></pre><p>As of Perch 2.4, you can extend the amount content saved at a page level, using <a href="/blog/2015/02/18/page-attributes-in-perch/">Page Attributes</a>. Page Attributes can be very useful, but they can&#39;t be used to be target a sub-sect of pages (like our project pages), so are not ideal for what we&#39;re trying to achieve. I.E You can only add fields that will be available to all pages.</p>
<p><em>Update: This is not entirely true. You can set an &#39;Attribute template&#39; per page, in &#39;Page Options&#39;. Attribute templates allow you to decide which attributes are configurable at a page level. There is a draw back back though; the &#39;Attribute template&#39; is not saved in a Master page. So it would be down to the user to configure the &#39;Attribute template&#39; each page. Checkout my post of Page Attributes <a href="/blog/2015/02/18/page-attributes-in-perch/">here</a>.</em></p>
<p>What is needed is a mechanism, whereby the page order is retrieved from the Navigation part of Perch and the content, from a region designed with our projects in mind.</p>
<pre><code class="lang-php">&lt;ul&gt;
    &lt;?php
        $nav = perch_pages_navigation(array( // Return navigation pages data as array
            &#39;from-path&#39; =&gt; &#39;*&#39;,
            &#39;skip-template&#39; =&gt; true
            ));

        foreach($nav as $page) { // Loop through &amp; customise each item returned in the array
            PerchSystem::set_var(&#39;pageNavText&#39;, $page[&#39;pageNavText&#39;]); // Grab the page title
            PerchSystem::set_var(&#39;pagePath&#39;, $page[&#39;pagePath&#39;]); // Find the correct links for each page
            perch_content_custom(&#39;Detail&#39;, array( // &#39;Detail&#39; is the region containing the data we need - this is used in the target page template
                &#39;page&#39; =&gt; $page[&#39;pagePath&#39;], // The dynamic path to the page which contains the target region
                &#39;template&#39; =&gt;&#39;project_item.html&#39; // This region reuses data from target pages (image, excerpt)
            ));

            $i = $i + 1;
        }
    ?&gt;
&lt;/ul&gt;
</code></pre>
<p>The PHP above retrieves our list of pages using <code>perch_pages_navigation</code>, but this time skipping the template. Setting <code>skip-template</code> to <code>true</code>, bypasses the HTML rendering process and returns an array instead. The array itself is a list of all our project pages, including associated page data.</p>
<p>With the array in hand, we can apply it to a standard content region, allowing us to access project specific content. Within the <code>foreach</code> loop, we grab what we need from the page data (in this case <code>pagePath</code> and <code>pageNavText</code>). We&#39;ll need the <code>pagePath</code> value for two reasons; we&#39;ll need to know where we&#39;re linking too, but also we can use <code>pagePath</code> to summon up our project specific content. </p>
<p>See this line below, it&#39;s instructing <code>perch_content_custom</code> to go to the project page for the content to populate our template (&#39;project_item.html&#39;).</p>
<pre><code class="lang-php">    &#39;page&#39; =&gt; $page[&#39;pagePath&#39;], // The dynamic path to the page which contains the target region
</code></pre>
<p>That&#39;s really powerful, but I&#39;ve skipped two things:</p>
<ol>
<li>What does the &#39;Detail&#39; region of the project page look like?</li>
<li>What does &#39;project_item.html&#39; look like?</li>
</ol>
<p>Where possible I tend to organise my page templates into as few content regions as possible, the primary region typically being called &#39;Detail&#39;.</p>
<p>Let&#39;s assume we&#39;re project title is being inferred from the page title. Below is the Detail region (&#39;project_detail.html&#39;), which includes a description, an image and a list of features.</p>
<pre><code class="lang-html">&lt;div class=&quot;desc&quot;&gt;
    &lt;perch:content id=&quot;desc&quot; type=&quot;textarea&quot; label=&quot;Description&quot; html=&quot;true&quot; editor=&quot;ckeditor&quot; imagewidth=&quot;640&quot; imageheight=&quot;480&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;two-col&quot;&gt;
    &lt;div class=&quot;image&quot;&gt;
        &lt;img src=&quot;&lt;perch:content type=&quot;image&quot; id=&quot;image&quot; label=&quot;Image&quot; width=&quot;800&quot; /&gt;&quot; alt=&quot;&lt;perch:content type=&quot;text&quot; id=&quot;alt&quot; label=&quot;Description&quot; required=&quot;true&quot; help=&quot;e.g. Photo of MD John Smith with his best wig on&quot; title=&quot;true&quot; /&gt;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;feat&quot;&gt;
        &lt;ul&gt;
            &lt;perch:repeater id=&quot;features&quot; label=&quot;Features&quot;&gt;
                &lt;li&gt;
                    &lt;perch:content type=&quot;text&quot; id=&quot;feature&quot; label=&quot;Feature&quot; /&gt;
                &lt;/li&gt;
            &lt;/perch:repeater&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><em>Since the inclusion of <a href="http://docs.grabaperch.com/docs/templates/repeaters/">Repeaters</a> within content templates, it&#39;s become much easier to create self contained content regions. Before repeaters, the moment you hit an image gallery or feature list, you&#39;d need to duck out of your primary content region and create a new repeating content region. Leading to fun naming conventions like &#39;Detail - Top&#39; and &#39;Detail - Bottom&#39;, with &#39;Feature List&#39; stuck in the middle.</em></p>
<p>We&#39;ll need to some an additional fields to &#39;project_detail.html&#39;,for us to access in the index page, a thumbnail and an excerpt:</p>
<pre><code class="lang-html">    &lt;perch:content id=&quot;thumbnail&quot; type=&quot;image&quot; label=&quot;Thumbnail&quot; width=&quot;310&quot; height=&quot;160&quot; crop=&quot;true&quot; required=&quot;true&quot; help=&quot;Recommended image size: 310px wide &amp; 160px high&quot; suppress=&quot;true&quot;/&gt;
    &lt;perch:content id=&quot;excerpt&quot; type=&quot;textarea&quot; label=&quot;Excerpt&quot; html=&quot;false&quot; imagewidth=&quot;640&quot; imageheight=&quot;480&quot; suppress=&quot;true&quot; /&gt;
</code></pre>
<p>Both fields have <code>suppress</code> set to <code>true</code>, meaning that they fields available for input, but will not appear in the resulting HTML for the template. We want the use to be able to enter an excerpt, but we don&#39;t want the except to appear on the detail page.</p>
<p>So, what does &#39;project_item.html&#39; look like? You can see it below:</p>
<pre><code class="lang-html">    &lt;article&gt;
        &lt;h2&gt;
            &lt;perch:content id=&quot;pageNavText&quot; /&gt;
        &lt;/h2&gt;
        &lt;div class=&quot;project-thumb&quot;&gt;
            &lt;img src=&quot;&lt;perch:content id=&quot;thumbnail&quot; type=&quot;image&quot; width=&quot;310&quot; height=&quot;160&quot; crop=&quot;true&quot;/&gt;&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;project-detail&quot;&gt;
            &lt;div class=&quot;excerpt&quot;&gt;
                &lt;p&gt;
                    &lt;perch:content id=&quot;excerpt&quot; type=&quot;textarea&quot; /&gt;
                &lt;/p&gt;

            &lt;/div&gt;
            &lt;a href=&quot;&lt;perch:content id=&quot;pagePath&quot; /&gt;&quot;&gt;
                VIEW CASE STUDY
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/article&gt;
</code></pre>
<p>The title is inferred from the <code>pageNavText</code> variable (set in the <code>foreach</code> loop), likewise the url comes from <code>pagePath</code>. The thumbnail and the except are retrieved using standard Perch content tags, as it is after all content being rendered using <code>perch_content_custom</code>.</p>
<p>Your resulting index page will look something like:</p>
<pre><code class="lang-html">    &lt;article&gt;
        &lt;h2&gt;
            Project 1
        &lt;/h2&gt;
        &lt;div class=&quot;project-thumb&quot;&gt;
            &lt;img src=&quot;/images/project-1.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;project-detail&quot;&gt;
            &lt;div class=&quot;excerpt&quot;&gt;
                &lt;p&gt;
                    Project excerpt
                &lt;/p&gt;

            &lt;/div&gt;
            &lt;a href=&quot;/projects/project-1.php&quot;&gt;
                VIEW CASE STUDY
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/article&gt;
    &lt;article&gt;
        &lt;h2&gt;
            Project 2
        &lt;/h2&gt;
        &lt;div class=&quot;project-thumb&quot;&gt;
            &lt;img src=&quot;/images/project-2.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;
        &lt;/div&gt;
        &lt;div class=&quot;project-detail&quot;&gt;
            &lt;div class=&quot;excerpt&quot;&gt;
                &lt;p&gt;
                    Project 2 excerpt
                &lt;/p&gt;

            &lt;/div&gt;
            &lt;a href=&quot;/projects/project-2.php&quot;&gt;
                VIEW CASE STUDY
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/article&gt;
</code></pre>
<p>As you can see above, we now have an index page with links to the sub pages, including a brief excerpt and a thumbnail for each.</p>
<p>The advantages of this solution are:</p>
<ol>
<li>Because the solution uses  <code>perch_pages_navigation</code>, the page will honour Perch&#39;s ordering functionality. </li>
<li>The use of <code>perch_content_custom</code> means that we can create fields specifically for use in project pages, that don&#39;t bloat the page data of non project pages.</li>
</ol>
<p>The problem with the solution, is that multiple calls to the database are required to display the list. One to retrieve the navigation list, and then an additional call for each of the pages returned.</p>
<p>A solution that reduced the amount of database calls, while still harnessed the power of the Perch templating system, might to write a SQL statement manually, the joined the navigation <code>SELECT</code> statement to a statement retrieving the desired content data, then parsed each of the results through the templating system. This might be something I investigate, should the volume of sub pages, demonstrate a noticeable slowdown of load time.</p>
]]></content>
  </entry>
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2015/01/13/the-funniest-men-of-all-time-rebuttal/"/>
    <updated>2015-01-13T17:20:21+00:00</updated>
    <id>http://rich.k3r.me/blog/2015/01/13/the-funniest-men-of-all-time-rebuttal/</id>
    <content type="html"><![CDATA[<p>When I saw the post <a href="http://thechive.com/2015/01/03/the-funniest-men-of-all-time-15-photos/">The funniest men of all time</a> pop up on my feed the other day, I was interested to see the awesome caliber of comic genius that would appear on such a strongly titled list.</p>
<!--more-->
<p><em>I think we can all safely assume going into this post, that the use of the word &#39;men&#39; is used strictly in the non-specific gender meaning of the word. Definitely.</em></p>
<p>Well that was weird. Let me take you through thought process, step by step:</p>
<ol>
<li>I don&#39;t know who half these people are.</li>
<li>After some research, they all appear to be North American.</li>
<li>I suspect, this is not a definitive list and heavily biased towards an american audience.</li>
<li>Richard Pryor would definitely make my list.</li>
<li>I&#39;m gonna make a list.</li>
<li>Aren&#39;t there any funny North American women?</li>
<li>I&#39;m sure there is, I just can&#39;t think of their names at the moment.</li>
</ol>
<p>With my brain stuck on point 5, my own list must be heard! So my, nay THE list of funnest <del>men</del> humans of ALL TIME, with every chance that it may or may not be factually accurate, is:</p>
<p>##Richard Pryor
The Chive got this one right, holy cow this man was funny. I first encountered Prior, as every good nerd only could have, in Superman 3.</p>
<p>##John Cleese
Of all the Brits not to make any american list of funny people, it&#39;s John Cleese I&#39;m amazed was missing. He&#39;s done so much it&#39;s hard to name favourite, but I&#39;m going to try; Fawlty Towers. Or maybe Life of Brian.</p>
<p>Mr. Cleese also has a lot of interesting to say about creativity. He has certainly helped me look how I work creatively.</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/yAwDWe7OIF8" frameborder="0" allowfullscreen></iframe><img src="" alt=""></p>
<p>##Sarah Silverman
The Sarah Silverman Show has made me cry why laughter on more than one occasion. She does a surreal, irreverent style of comedy that... I wish there was more of it. (North American funny lady)</p>
<p>##Dylan Moran
I&#39;ve been in love with this man&#39;s comedy since Black Books. I like to believe it&#39;s actually how Dylan Moran lives his life.</p>
<p>##Dawn French
Dawn French is an absolute must for this list, for so many reasons; from Comic Strip to Vicar of Dibley.</p>
<p>##Sean Lock
I find Sean Lock&#39;s view of the world hysterical.</p>
<p>##Robin Williams
He had me a Mork. I&#39;ve not stopped laughing since.</p>
<p>##Reginald D. Hunter
I love what I perceive to be British humour, and struggle with a lot of &#39;established&#39; American comedians. Reginald D. Hunter just seems to get it.</p>
<p>##Morecambe &amp; Wise
Is it fair to have a double act? If this was a countdown, there&#39;d be my number one.</p>
<p>##Eddie Izzard
He was the comedy soundtrack to my twenties. It&#39;s the bird flying by the plane that gets me every time.</p>
<p>##Tommy Cooper
&quot;What&#39;s this?&quot;
&quot;A dead one of these.&quot;</p>
<p>There is a lot of pressure writing a list like this. I&#39;ve given up trying to find CC images for them. I don&#39;t know how other people do it. Billy Crystal and Bill Bailey certainly belong on the list as well, I&#39;m not sure why I haven&#39;t added them.</p>
<p>Stephen Fry, who I find immensely funny, also isn&#39;t on the list. A travesty.</p>
<p>I love Richard Ayoade&#39;s dry sense of humour. Which reminds me, Katherine Parkinson makes The IT Crowd for me.</p>
<p>I think there is actually loads of people of missed out and I&#39;m also uncomfortable with the lack of order. It&#39;s not well presented list and you probably shouldn&#39;t take it too seriously.</p>
<p>I also find Adam Buxton extremely funny. I hope there is a new series of Bug in the works.</p>
<p>What would your list of funny people look like? I&#39;d love to hear.</p>
]]></content>
  </entry>
    
  
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2014/12/21/half-arsed-working-techniques/"/>
    <updated>2014-12-21T11:21:41+00:00</updated>
    <id>http://rich.k3r.me/blog/2014/12/21/half-arsed-working-techniques/</id>
    <content type="html"><![CDATA[<p>##TL;DR
&quot;Half-arsed&quot;, as in reducing possibility of getting a fat arse by working more efficiently.  It&#39;s a pun, I&#39;m funny like that.</p>
<p>##Introduction
I recently watched this video <a href="http://youtu.be/uiKg6JfS658">Are You Sitting Too Much?</a> and the followup <a href="http://youtu.be/4K_ENbRgywY">9 Tips To Save Your Life</a>. Please watch them if you sit for long periods of time, they&#39;re not long and you learn a lot.</p>
<p>I really had no idea, which is irritating because it makes perfect sense. It makes perfect sense, because even in my ignorance, I have already seen the benefits yielded from breaking up my work. Having unwittingly lost half a stone this year, without changing my diet (next year&#39;s resolution).</p>
<!--more-->
<p>The tips in the second video are insightful, but didn&#39;t really speak to my specific situation. So, I&#39;ve come up with a few ideas for how I might tackle the issue. </p>
<p>##Use a Timer
We use a service called <a href="https://letsfreckle.com/">Freckle</a> to track the time we spend on projects. On the Mac app at least, the timer beeps once an hour; this I believe is there to indicate that the timer is still running. It seems to me though, that it is also a great reminder to get up and stretch your legs for five minutes.</p>
<p>Now, while I adore Freckle and it&#39;s beautiful reporting, it is quite expensive. $49 per month for a team of five. I strive for greater efficiency, if only so one day I feel I can survive the week without Freckle. It is certainly too much to spend on a simple timer to remind you to get up and have a wander.</p>
<p>If I was without Freckle and facing this issue, I&#39;d recognise my personal cycles of work differ at different times during the day. That is to say, that I would be much aggrieved if I was interrupted from my work after a mere hour, first thing in the morning, but would take such a distraction as a blessing mid-afternoon. Instead, I&#39;d chop my day into sprints of different lengths, and set up timers accordingly. This would have the extra benefit of adding a bit more structure to my day, by understanding when I&#39;m more effective at longer or shorter tasks.</p>
<p>##Work Standing
I&#39;ve long enjoyed the idea of these adjustable desks, that allow you to work seated or standing. They are very expensive though and I wonder how I would actually get on coding for long periods of time, while standing.</p>
<p>Coding aside, I think a lot of activities can benefit from standing.</p>
<p>###Catch Up Meetings
The most obvious example is meetings. Quick catch up meetings have more impact when standing, the same meeting while seated would take twice as long.</p>
<p>###Phone calls
I&#39;m a pacer on the phone, so this is an easy one for me. It can be quite distracting for others, but I&#39;ll get most of my steps throughout the day just by talking on the phone.</p>
<p>###Poor man&#39;s adjustable desk
This is crazy idea I&#39;ve had, that I think I&#39;d like to trial. I don&#39;t think I&#39;d code standing up, but there is a bunch of other stuff that I would do on a computer while standing. Clearing up email, project management, or testing comes to mind.</p>
<p>The premise of my idea is that my development work requires a beast of a machine, but other tasks may not. I&#39;d have two desks, or at least have access to a second.</p>
<p>####Desk One
Desk One, as it has always been, comfy with massive computer in front of me. </p>
<p>####Desk Two
More like a shelf or a &quot;hot desking&quot; coffee shop table at standing height, with an inexpensive laptop (like a Chromebook) setup.</p>
<p>Every time you want to perform an admin task, you get up and walk to your admin shelf. It really doesn&#39;t need to be much more than that, if you&#39;re going to start leaning, you&#39;re using the space for the wrong task.</p>
<p>##Conclusion
I&#39;m really excited about setting up sprints. I like that I&#39;d be able communicate clearer expectations of when I&#39;m approachable to my co-workers, after understanding my own process more clearly.</p>
<p>I&#39;m also falling in love with the idea of an admin shelf, or maybe not an admin shelf, maybe an area that is more communal. A standing desk area, that by virtue of standing there says, &quot;Hey I&#39;m approachable&quot;. </p>
<p>##Conclusion on Conclusion
What&#39;s weird about my conclusion, is that it doesn&#39;t talk about my ideas in context of standing more; which is the point of the post. I seem to be more concerned with disruptions in my workflow and being approachable to my co-workers. I think that&#39;s interesting, because for me, it&#39;s all interconnected.</p>
<p>By playing with these techniques, I don&#39;t just prevent the onset of having a fat arse, I also become more productive and collaborative in my work.</p>
]]></content>
  </entry>
    
  
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2012/11/25/converting-svn-to-git/"/>
    <updated>2012-11-25T20:36:00+00:00</updated>
    <id>http://rich.k3r.me/blog/2012/11/25/converting-svn-to-git/</id>
    <content type="html"><![CDATA[<blockquote>
<p>This is a repost of <a href="http://dogma.co.uk/blog/10-converting-svn-to-git">http://dogma.co.uk/blog/10-converting-svn-to-git</a></p>
</blockquote>
<p>We&#39;ve recently set about converting all our old SVN repositories to GIT. The process is quite easy thanks to the <code>git svn</code> command, but there are some gotchas. So, I&#39;ll detail the process below.</p>
<p>Every revision in a SVN repository has an author, these authors need to be migrated to the new GIT repository; which is done by compiling a text file listing the existing SVN username along with the author&#39;s new GIT equivalent. The format of the text file is as follows:</p>
<pre><code class="lang-bash">svn_username = GIT User Name &lt;user@dogma.co.uk&gt;
</code></pre>
<!--more-->
<p>You can list as many users in this file as you like, duplicating the GIT details if required. To generate a list of the SVN author&#39;s run the following with the SVN repo:</p>
<pre><code class="lang-bash">svn log --xml | grep author | sort -u | perl -pe &#39;s/.&gt;(.?)&lt;./$1 = /&#39;
</code></pre>
<p>A potential gotcha here is that <code>git svn</code> will fail if the SVN username has spaces in it. This caught me out as our older SVN repos were originally hosted on a Visual SVN Server, which used the username <code>Visual SVN</code>.  If you have a username with spaces in it, you must change that username in each revision the author is attached to.</p>
<p>To identify the offending revisions, run:</p>
<pre><code class="lang-bash">svn log | sed -n &#39;/svn_username/,/-----$/ p&#39;
</code></pre>
<p>Then to fix the username, run the following on each revision:</p>
<p>svn propedit svn:author -r revision --revprop svn_url
Once you have created an authors file (usually called authors.txt), run the following in an empty directory to clone the SVN repo into a new temporary GIT repo called <code>git-tmp</code>:</p>
<pre><code class="lang-bash">git svn clone --stdlayout --no-metadata -A authors.txt svn_url git-tmp
</code></pre>
<p>Change directory into <code>git-tmp</code> and run the following to fetch the SVN repo structure:</p>
<pre><code class="lang-bash">git svn fetch
</code></pre>
<p>Now you&#39;ll want to link the temporary repository to your destination remote GIT repo, by running the following:</p>
<pre><code class="lang-bash">git remote add remote git_url
git push -u remote master
</code></pre>
<p>The commands above will only push the master (what was trunk) to the remote repo. Currently, any branches you have in the SVN repo only exist as remote references in <code>git-tmp</code>. To make these references local branches and then push them to the server, run the following for each branch you would like to keep:</p>
<pre><code class="lang-bash">branch=branch; remote=remote; git checkout -b $branch remotes/$branch; git push -u $remote $branch; git checkout master
</code></pre>
<p>Providing all went well, you can now discard the temporary GIT repo and clone a fresh copy of your new remote GIT repo.</p>
]]></content>
  </entry>
    
  
    
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://rich.k3r.me/blog/2011/03/04/content-management-with-perch/"/>
    <updated>2011-03-04T04:22:42+00:00</updated>
    <id>http://rich.k3r.me/blog/2011/03/04/content-management-with-perch/</id>
    <content type="html"><![CDATA[<blockquote>
<p>This is a repost of <a href="http://dogma.co.uk/blog/1-content-management-with-perch">http://dogma.co.uk/blog/1-content-management-with-perch</a></p>
</blockquote>
<p>Perch, if you not already aware is a curious little PHP CMS by British design agency edgeofmyseat.com.  Curious because in an ecosystem dominated by feature rich, open source, free CMSs like WordPress and Drupal; Perch provides only one feature out of the box and costs about £40 per site including VAT. Curious because given this information, I&#39;m still overwhelming drawn to Perch for a lot of my projects.</p>
<!--more-->
<p>Why I&#39;m drawn to Perch is the simplicity of the CMS itself. <a href="http://edgeofmyseat.com/">edgeofmyseat.com</a> have found niche between the handful of static HTML files in a directory and site built from the ground up to be content managed.</p>
<p>WordPress for instance, makes it very easy to create a very manageable site in minutes, literally. I dropped the folder on to my server, ran the installer and two minutes later I had a fully content managed site. Amazing, and with such a large community supporting WordPress I had customised the look, feel and function of my site with some of the thousands of free themes and plugins on offer.</p>
<p>But what about the site I already have? The individual HTML pages, strung together with anchor tags and a splash of PHP or similar as the contact form required it. Or the client who is intimidated (or just disinterested) with admin screens filled with Posts, Comments, Plugins and Tools?</p>
<p>If I was to content manage that static site with WordPress, I&#39;d have to extract a template from the many pages built by my predecessors and create a theme. Assuming that is the pages have retained a uniform appearance over time. Then I manually recreate each of the pages in the CMS and create (or find equivalent) plugins for all the little bits of bespoke functionality that WordPress doesn&#39;t quite deal with. The horrible feeling that developers get when retreading old ground.</p>
<p>Or, you install Perch. Perch is designed to let you work the way you want. You create your pages, your structure, add your images and navigation. Out of the box, Perch does one thing really well. When you&#39;re creating your pages and you come across section that needs to be edited by the client, drop in a content tag.</p>
<pre><code class="lang-php">&lt;?php perch_content(&quot;Dynamic Content&quot;); ?&gt;
</code></pre>
<p>You also need to tell Perch to watch the page; you do this by adding the following line to the top of the page:</p>
<pre><code class="lang-php">&lt;?php include(&quot;../perch/runtime.php&quot;); ?&gt;
</code></pre>
<p>What happens is this; when you subsequently load that page. Perch queries the database to see if it has any content for page X called &#39;Dynamic Content&#39;. If Perch doesn&#39;t have a content region in that location, it creates one. The next time you log into Perch, you&#39;ll be provided with a content region called &#39;Dynamic Content&#39; flagged as new.</p>
<p><img src="/images/content-manage-perch-1.png" alt="Dynamic Content"></p>
<p>Clicking on the region gives you the opportunity to define the content type from many built-in templates ranging from text to Google Analytics to images to blocks of code. If there isn&#39;t a template that suits your needs, create your own. You can also decide whether the content is recurring (like a list of posts) and whether content is to be shared between multiple pages.</p>
<p>So to go back to the example of that static site. Your client just wants to change the text on the front page, or update the news feed themselves. Just add a couple of PHP tags to the desired page, set the content type in the CMS and away you go. Replicating the existing news feed is as easy as copying one of the existing news items and pasting it into a new template, replacing the content with perch tags.</p>
<pre><code class="lang-php">&lt;perch:content id=&quot;heading&quot; type=&quot;text&quot; label=&quot;Heading&quot; /&gt;
</code></pre>
<p>In summary, Perch is easy to setup (install process similar to WordPress) and makes it incredibly easy to add content management to existing sites on PHP capable web servers. Perch also contains an elegant API for extending the core functionality in the form of Apps. Apps available for download from the Perch site provide blogging functionality and dynamic page creation amongst other things. Hopefully I&#39;ll get a chance to cover Apps and App development in another post. If you regularly deal with legacy sites or just want to simplify things a bit, I recommend you check Perch out.</p>
]]></content>
  </entry>
    
  

</feed>
